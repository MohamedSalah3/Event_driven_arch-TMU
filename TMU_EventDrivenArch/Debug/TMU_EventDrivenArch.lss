
TMU_EventDrivenArch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000f08  00000f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080007c  0080007c  00000fb8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001710  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014bb  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000603  00000000  00000000  00002ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000738  00000000  00000000  000032ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  00003a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e4  00000000  00000000  000042f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001739  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_1>
   8:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_2>
   c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_3>
  10:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_4>
  14:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_5>
  18:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_6>
  1c:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_7>
  20:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_8>
  24:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_9>
  28:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_10>
  2c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_11>
  30:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_12>
  34:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_13>
  38:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_14>
  3c:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_15>
  40:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_16>
  44:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_17>
  48:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_18>
  4c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_19>
  50:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_20>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3b       	cpi	r26, 0xB5	; 181
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 04 	call	0x8ba	; 0x8ba <main>
  8a:	0c 94 82 07 	jmp	0xf04	; 0xf04 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	uint8_t RET=0;
  92:	fc 01       	movw	r30, r24
		switch(DIO_info->dir)
  94:	82 81       	ldd	r24, Z+2	; 0x02
  96:	88 23       	and	r24, r24
  98:	21 f0       	breq	.+8      	; 0xa2 <DIO_init+0x10>
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_init+0xe>
  9e:	4a c0       	rjmp	.+148    	; 0x134 <DIO_init+0xa2>
  a0:	27 c0       	rjmp	.+78     	; 0xf0 <DIO_init+0x5e>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
  a2:	80 81       	ld	r24, Z
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	79 f0       	breq	.+30     	; 0xc6 <DIO_init+0x34>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_init+0x26>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 f0       	breq	.+36     	; 0xd4 <DIO_init+0x42>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_init+0x24>
  b4:	41 c0       	rjmp	.+130    	; 0x138 <DIO_init+0xa6>
  b6:	15 c0       	rjmp	.+42     	; 0xe2 <DIO_init+0x50>
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
  b8:	9a b3       	in	r25, 0x1a	; 26
  ba:	81 81       	ldd	r24, Z+1	; 0x01
  bc:	80 95       	com	r24
  be:	89 23       	and	r24, r25
  c0:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  c2:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
  c4:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
  c6:	97 b3       	in	r25, 0x17	; 23
  c8:	81 81       	ldd	r24, Z+1	; 0x01
  ca:	80 95       	com	r24
  cc:	89 23       	and	r24, r25
  ce:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  d0:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
  d2:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
  d4:	94 b3       	in	r25, 0x14	; 20
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	80 95       	com	r24
  da:	89 23       	and	r24, r25
  dc:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  de:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
  e0:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
  e2:	91 b3       	in	r25, 0x11	; 17
  e4:	81 81       	ldd	r24, Z+1	; 0x01
  e6:	80 95       	com	r24
  e8:	89 23       	and	r24, r25
  ea:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
  ec:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
  ee:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
  f0:	80 81       	ld	r24, Z
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	69 f0       	breq	.+26     	; 0x110 <DIO_init+0x7e>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_init+0x72>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	79 f0       	breq	.+30     	; 0x11c <DIO_init+0x8a>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	e9 f4       	brne	.+58     	; 0x13c <DIO_init+0xaa>
 102:	12 c0       	rjmp	.+36     	; 0x128 <DIO_init+0x96>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
 104:	9a b3       	in	r25, 0x1a	; 26
 106:	81 81       	ldd	r24, Z+1	; 0x01
 108:	89 2b       	or	r24, r25
 10a:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 10c:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
 10e:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
 110:	97 b3       	in	r25, 0x17	; 23
 112:	81 81       	ldd	r24, Z+1	; 0x01
 114:	89 2b       	or	r24, r25
 116:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 118:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
 11a:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
 11c:	94 b3       	in	r25, 0x14	; 20
 11e:	81 81       	ldd	r24, Z+1	; 0x01
 120:	89 2b       	or	r24, r25
 122:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 124:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
 126:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
 128:	91 b3       	in	r25, 0x11	; 17
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	89 2b       	or	r24, r25
 12e:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 130:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
 132:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0

			default:
			RET=E_NOK;
	}
return RET;
}
 13e:	08 95       	ret

00000140 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
 140:	44 23       	and	r20, r20
 142:	21 f0       	breq	.+8      	; 0x14c <DIO_Write+0xc>
 144:	4f 3f       	cpi	r20, 0xFF	; 255
 146:	09 f0       	breq	.+2      	; 0x14a <DIO_Write+0xa>
 148:	3f c0       	rjmp	.+126    	; 0x1c8 <DIO_Write+0x88>
 14a:	21 c0       	rjmp	.+66     	; 0x18e <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	69 f0       	breq	.+26     	; 0x16a <DIO_Write+0x2a>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_Write+0x1e>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	79 f0       	breq	.+30     	; 0x176 <DIO_Write+0x36>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	c1 f5       	brne	.+112    	; 0x1cc <DIO_Write+0x8c>
 15c:	12 c0       	rjmp	.+36     	; 0x182 <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	60 95       	com	r22
 162:	68 23       	and	r22, r24
 164:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 166:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
 168:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	60 95       	com	r22
 16e:	68 23       	and	r22, r24
 170:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 172:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
 174:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
 176:	85 b3       	in	r24, 0x15	; 21
 178:	60 95       	com	r22
 17a:	68 23       	and	r22, r24
 17c:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 17e:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
 180:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
 182:	82 b3       	in	r24, 0x12	; 18
 184:	60 95       	com	r22
 186:	68 23       	and	r22, r24
 188:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 18a:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
 18c:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	61 f0       	breq	.+24     	; 0x1aa <DIO_Write+0x6a>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Write+0x60>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_Write+0x74>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	c9 f4       	brne	.+50     	; 0x1d0 <DIO_Write+0x90>
 19e:	0f c0       	rjmp	.+30     	; 0x1be <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
 1a0:	8b b3       	in	r24, 0x1b	; 27
 1a2:	68 2b       	or	r22, r24
 1a4:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
 1a8:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	68 2b       	or	r22, r24
 1ae:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
 1b2:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	68 2b       	or	r22, r24
 1b8:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
 1bc:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
 1be:	82 b3       	in	r24, 0x12	; 18
 1c0:	68 2b       	or	r22, r24
 1c2:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
 1c6:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
 1d2:	08 95       	ret

000001d4 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
 1d4:	fa 01       	movw	r30, r20

switch (GPIO)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <DIO_Read+0x1c>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_Read+0x14>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	59 f0       	breq	.+22     	; 0x1f8 <DIO_Read+0x24>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	81 f4       	brne	.+32     	; 0x206 <DIO_Read+0x32>
 1e6:	0c c0       	rjmp	.+24     	; 0x200 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
 1e8:	89 b3       	in	r24, 0x19	; 25
 1ea:	68 23       	and	r22, r24
 1ec:	60 83       	st	Z, r22
	break;
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
 1f0:	86 b3       	in	r24, 0x16	; 22
 1f2:	68 23       	and	r22, r24
 1f4:	60 83       	st	Z, r22
	break;
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
 1f8:	83 b3       	in	r24, 0x13	; 19
 1fa:	68 23       	and	r22, r24
 1fc:	60 83       	st	Z, r22
	break;
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
 200:	80 b3       	in	r24, 0x10	; 16
 202:	68 23       	and	r22, r24
 204:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	11 f0       	breq	.+4      	; 0x210 <DIO_Read+0x3c>
{
	*data = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24
}


}
 210:	08 95       	ret

00000212 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	61 f0       	breq	.+24     	; 0x22e <DIO_Toggle+0x1c>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	28 f0       	brcs	.+10     	; 0x224 <DIO_Toggle+0x12>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	69 f0       	breq	.+26     	; 0x238 <DIO_Toggle+0x26>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	a9 f4       	brne	.+42     	; 0x24c <DIO_Toggle+0x3a>
 222:	0f c0       	rjmp	.+30     	; 0x242 <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	68 27       	eor	r22, r24
 228:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
		break;
 22c:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	68 27       	eor	r22, r24
 232:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
 234:	80 e0       	ldi	r24, 0x00	; 0
		break;
 236:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
 238:	85 b3       	in	r24, 0x15	; 21
 23a:	68 27       	eor	r22, r24
 23c:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
 240:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
 242:	82 b3       	in	r24, 0x12	; 18
 244:	68 27       	eor	r22, r24
 246:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
 248:	80 e0       	ldi	r24, 0x00	; 0
		break;
 24a:	08 95       	ret
		default:
		ret=E_NOK;
 24c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
 24e:	08 95       	ret

00000250 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
 250:	8f b7       	in	r24, 0x3f	; 63
 252:	80 68       	ori	r24, 0x80	; 128
 254:	8f bf       	out	0x3f, r24	; 63
}
 256:	08 95       	ret

00000258 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
 258:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
 25a:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
 25c:	8b b7       	in	r24, 0x3b	; 59
 25e:	80 62       	ori	r24, 0x20	; 32
 260:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
 262:	84 b7       	in	r24, 0x34	; 52
 264:	80 64       	ori	r24, 0x40	; 64
 266:	84 bf       	out	0x34, r24	; 52
}
 268:	08 95       	ret

0000026a <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
 26a:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
 26c:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
 26e:	8b b7       	in	r24, 0x3b	; 59
 270:	80 68       	ori	r24, 0x80	; 128
 272:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
 274:	85 b7       	in	r24, 0x35	; 53
 276:	84 60       	ori	r24, 0x04	; 4
 278:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
 27a:	85 b7       	in	r24, 0x35	; 53
 27c:	87 7f       	andi	r24, 0xF7	; 247
 27e:	85 bf       	out	0x35, r24	; 53
	
}
 280:	08 95       	ret

00000282 <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
 282:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
 284:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
 286:	8b b7       	in	r24, 0x3b	; 59
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
 28c:	85 b7       	in	r24, 0x35	; 53
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
 292:	85 b7       	in	r24, 0x35	; 53
 294:	8d 7f       	andi	r24, 0xFD	; 253
 296:	85 bf       	out	0x35, r24	; 53
	
}
 298:	08 95       	ret

0000029a <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
 29a:	8f b7       	in	r24, 0x3f	; 63
 29c:	8f 77       	andi	r24, 0x7F	; 127
 29e:	8f bf       	out	0x3f, r24	; 63
}
 2a0:	08 95       	ret

000002a2 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
  INT0_external_interrupt();
 2c4:	e0 91 96 00 	lds	r30, 0x0096
 2c8:	f0 91 97 00 	lds	r31, 0x0097
 2cc:	09 95       	icall
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
  INT1_external_interrupt();
 312:	e0 91 9e 00 	lds	r30, 0x009E
 316:	f0 91 9f 00 	lds	r31, 0x009F
 31a:	09 95       	icall
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31
  INT2_external_interrupt();
 360:	e0 91 8e 00 	lds	r30, 0x008E
 364:	f0 91 8f 00 	lds	r31, 0x008F
 368:	09 95       	icall
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
TIMER2COMP();
 3ae:	e0 91 a4 00 	lds	r30, 0x00A4
 3b2:	f0 91 a5 00 	lds	r31, 0x00A5
 3b6:	09 95       	icall
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
  TIMER2OVF();
 3fc:	e0 91 84 00 	lds	r30, 0x0084
 400:	f0 91 85 00 	lds	r31, 0x0085
 404:	09 95       	icall
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
  TIMER1CAPT();
 44a:	e0 91 a0 00 	lds	r30, 0x00A0
 44e:	f0 91 a1 00 	lds	r31, 0x00A1
 452:	09 95       	icall
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
TIMER1COMPA();
 498:	e0 91 8a 00 	lds	r30, 0x008A
 49c:	f0 91 8b 00 	lds	r31, 0x008B
 4a0:	09 95       	icall
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
  TIMER1COMPB();
 4e6:	e0 91 88 00 	lds	r30, 0x0088
 4ea:	f0 91 89 00 	lds	r31, 0x0089
 4ee:	09 95       	icall
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	7f 91       	pop	r23
 4fe:	6f 91       	pop	r22
 500:	5f 91       	pop	r21
 502:	4f 91       	pop	r20
 504:	3f 91       	pop	r19
 506:	2f 91       	pop	r18
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
  TIMER1OVF();
 534:	e0 91 a2 00 	lds	r30, 0x00A2
 538:	f0 91 a3 00 	lds	r31, 0x00A3
 53c:	09 95       	icall
}
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	ef 93       	push	r30
 580:	ff 93       	push	r31

  TIMER0COMP();
 582:	e0 91 9a 00 	lds	r30, 0x009A
 586:	f0 91 9b 00 	lds	r31, 0x009B
 58a:	09 95       	icall
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31

  TIMER0OVF_INT();
 5d0:	e0 91 6c 00 	lds	r30, 0x006C
 5d4:	f0 91 6d 00 	lds	r31, 0x006D
 5d8:	09 95       	icall
}
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	2f 93       	push	r18
 608:	3f 93       	push	r19
 60a:	4f 93       	push	r20
 60c:	5f 93       	push	r21
 60e:	6f 93       	push	r22
 610:	7f 93       	push	r23
 612:	8f 93       	push	r24
 614:	9f 93       	push	r25
 616:	af 93       	push	r26
 618:	bf 93       	push	r27
 61a:	ef 93       	push	r30
 61c:	ff 93       	push	r31
  SPI_STC();
 61e:	e0 91 8c 00 	lds	r30, 0x008C
 622:	f0 91 8d 00 	lds	r31, 0x008D
 626:	09 95       	icall
}
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 64a:	1f 92       	push	r1
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	2f 93       	push	r18
 656:	3f 93       	push	r19
 658:	4f 93       	push	r20
 65a:	5f 93       	push	r21
 65c:	6f 93       	push	r22
 65e:	7f 93       	push	r23
 660:	8f 93       	push	r24
 662:	9f 93       	push	r25
 664:	af 93       	push	r26
 666:	bf 93       	push	r27
 668:	ef 93       	push	r30
 66a:	ff 93       	push	r31
  USART_RXC();
 66c:	e0 91 82 00 	lds	r30, 0x0082
 670:	f0 91 83 00 	lds	r31, 0x0083
 674:	09 95       	icall
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
  USART_UDRE();
 6ba:	e0 91 9c 00 	lds	r30, 0x009C
 6be:	f0 91 9d 00 	lds	r31, 0x009D
 6c2:	09 95       	icall
}
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	7f 91       	pop	r23
 6d2:	6f 91       	pop	r22
 6d4:	5f 91       	pop	r21
 6d6:	4f 91       	pop	r20
 6d8:	3f 91       	pop	r19
 6da:	2f 91       	pop	r18
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	0f 90       	pop	r0
 6e2:	1f 90       	pop	r1
 6e4:	18 95       	reti

000006e6 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 6e6:	1f 92       	push	r1
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	4f 93       	push	r20
 6f6:	5f 93       	push	r21
 6f8:	6f 93       	push	r22
 6fa:	7f 93       	push	r23
 6fc:	8f 93       	push	r24
 6fe:	9f 93       	push	r25
 700:	af 93       	push	r26
 702:	bf 93       	push	r27
 704:	ef 93       	push	r30
 706:	ff 93       	push	r31
  USART_TXC();
 708:	e0 91 98 00 	lds	r30, 0x0098
 70c:	f0 91 99 00 	lds	r31, 0x0099
 710:	09 95       	icall
}
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	bf 91       	pop	r27
 718:	af 91       	pop	r26
 71a:	9f 91       	pop	r25
 71c:	8f 91       	pop	r24
 71e:	7f 91       	pop	r23
 720:	6f 91       	pop	r22
 722:	5f 91       	pop	r21
 724:	4f 91       	pop	r20
 726:	3f 91       	pop	r19
 728:	2f 91       	pop	r18
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
  ADC_INT();
 756:	e0 91 92 00 	lds	r30, 0x0092
 75a:	f0 91 93 00 	lds	r31, 0x0093
 75e:	09 95       	icall
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
  EE_RDY();
 7a4:	e0 91 94 00 	lds	r30, 0x0094
 7a8:	f0 91 95 00 	lds	r31, 0x0095
 7ac:	09 95       	icall
}
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	bf 91       	pop	r27
 7b4:	af 91       	pop	r26
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	7f 91       	pop	r23
 7bc:	6f 91       	pop	r22
 7be:	5f 91       	pop	r21
 7c0:	4f 91       	pop	r20
 7c2:	3f 91       	pop	r19
 7c4:	2f 91       	pop	r18
 7c6:	0f 90       	pop	r0
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	0f 90       	pop	r0
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	2f 93       	push	r18
 7dc:	3f 93       	push	r19
 7de:	4f 93       	push	r20
 7e0:	5f 93       	push	r21
 7e2:	6f 93       	push	r22
 7e4:	7f 93       	push	r23
 7e6:	8f 93       	push	r24
 7e8:	9f 93       	push	r25
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31
  ANA_COMP();
 7f2:	e0 91 90 00 	lds	r30, 0x0090
 7f6:	f0 91 91 00 	lds	r31, 0x0091
 7fa:	09 95       	icall
}
 7fc:	ff 91       	pop	r31
 7fe:	ef 91       	pop	r30
 800:	bf 91       	pop	r27
 802:	af 91       	pop	r26
 804:	9f 91       	pop	r25
 806:	8f 91       	pop	r24
 808:	7f 91       	pop	r23
 80a:	6f 91       	pop	r22
 80c:	5f 91       	pop	r21
 80e:	4f 91       	pop	r20
 810:	3f 91       	pop	r19
 812:	2f 91       	pop	r18
 814:	0f 90       	pop	r0
 816:	0f be       	out	0x3f, r0	; 63
 818:	0f 90       	pop	r0
 81a:	1f 90       	pop	r1
 81c:	18 95       	reti

0000081e <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
 81e:	1f 92       	push	r1
 820:	0f 92       	push	r0
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	0f 92       	push	r0
 826:	11 24       	eor	r1, r1
 828:	2f 93       	push	r18
 82a:	3f 93       	push	r19
 82c:	4f 93       	push	r20
 82e:	5f 93       	push	r21
 830:	6f 93       	push	r22
 832:	7f 93       	push	r23
 834:	8f 93       	push	r24
 836:	9f 93       	push	r25
 838:	af 93       	push	r26
 83a:	bf 93       	push	r27
 83c:	ef 93       	push	r30
 83e:	ff 93       	push	r31
  TWI_I2C();
 840:	e0 91 80 00 	lds	r30, 0x0080
 844:	f0 91 81 00 	lds	r31, 0x0081
 848:	09 95       	icall
}
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	bf 91       	pop	r27
 850:	af 91       	pop	r26
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	7f 91       	pop	r23
 858:	6f 91       	pop	r22
 85a:	5f 91       	pop	r21
 85c:	4f 91       	pop	r20
 85e:	3f 91       	pop	r19
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
 86c:	1f 92       	push	r1
 86e:	0f 92       	push	r0
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	0f 92       	push	r0
 874:	11 24       	eor	r1, r1
 876:	2f 93       	push	r18
 878:	3f 93       	push	r19
 87a:	4f 93       	push	r20
 87c:	5f 93       	push	r21
 87e:	6f 93       	push	r22
 880:	7f 93       	push	r23
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31
  SPM_RDY();
 88e:	e0 91 86 00 	lds	r30, 0x0086
 892:	f0 91 87 00 	lds	r31, 0x0087
 896:	09 95       	icall
}
 898:	ff 91       	pop	r31
 89a:	ef 91       	pop	r30
 89c:	bf 91       	pop	r27
 89e:	af 91       	pop	r26
 8a0:	9f 91       	pop	r25
 8a2:	8f 91       	pop	r24
 8a4:	7f 91       	pop	r23
 8a6:	6f 91       	pop	r22
 8a8:	5f 91       	pop	r21
 8aa:	4f 91       	pop	r20
 8ac:	3f 91       	pop	r19
 8ae:	2f 91       	pop	r18
 8b0:	0f 90       	pop	r0
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	0f 90       	pop	r0
 8b6:	1f 90       	pop	r1
 8b8:	18 95       	reti

000008ba <main>:


#include "Timer.h"
#include "TMU.h"
int main(void)
{	PORTB_DIR=0xff;
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	87 bb       	out	0x17, r24	; 23
	//PORTA_DIR=0xff;
	//PORTC_DIR=0xff;
	//PORTD_DIR=0xff;
	PORTB_DATA=0xff;
 8be:	88 bb       	out	0x18, r24	; 24
	//PORTA_DATA=0xff;
	//PORTC_DATA=0xff;
	//PORTD_DATA=0xff;
	
	TMU_Init(&TMU_Configuration);
 8c0:	8a e7       	ldi	r24, 0x7A	; 122
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 dd 06 	call	0xdba	; 0xdba <TMU_Init>
	//TMU_Start_Timer(Tmu_excute,1,0,100);
	//TMU_Start_Timer(Tmu_Fun,1,0,100);
	TMU_Start_Timer(Tmu_For,1,0,100);
 8c8:	8b e6       	ldi	r24, 0x6B	; 107
 8ca:	97 e0       	ldi	r25, 0x07	; 7
 8cc:	61 e0       	ldi	r22, 0x01	; 1
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	24 e6       	ldi	r18, 0x64	; 100
 8d2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <TMU_Start_Timer>
	
	while(1)
    {
		TMU_Main_Function();
 8d6:	0e 94 34 07 	call	0xe68	; 0xe68 <TMU_Main_Function>
 8da:	fd cf       	rjmp	.-6      	; 0x8d6 <main+0x1c>

000008dc <Timer_Init>:
 *
 */
 static uint8_t prescaler_value=0;
 
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	ec 01       	movw	r28, r24
prescaler_value=Timer_cfg->Timer_Prescaler;
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	80 93 7c 00 	sts	0x007C, r24
switch (Timer_cfg->Timer_CH_NO) {
 8e8:	88 81       	ld	r24, Y
 8ea:	81 30       	cpi	r24, 0x01	; 1
 8ec:	09 f4       	brne	.+2      	; 0x8f0 <Timer_Init+0x14>
 8ee:	48 c0       	rjmp	.+144    	; 0x980 <Timer_Init+0xa4>
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	20 f0       	brcs	.+8      	; 0x8fc <Timer_Init+0x20>
 8f4:	82 30       	cpi	r24, 0x02	; 2
 8f6:	09 f0       	breq	.+2      	; 0x8fa <Timer_Init+0x1e>
 8f8:	d7 c0       	rjmp	.+430    	; 0xaa8 <Timer_Init+0x1cc>
 8fa:	90 c0       	rjmp	.+288    	; 0xa1c <Timer_Init+0x140>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
    case TIMER_CH0:
        {
  TCCR0 |=T0_NORMAL_MODE;
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	83 bf       	out	0x33, r24	; 51
  
          switch (Timer_cfg->Timer_Mode) {
 900:	89 81       	ldd	r24, Y+1	; 0x01
 902:	81 30       	cpi	r24, 0x01	; 1
 904:	b9 f0       	breq	.+46     	; 0x934 <Timer_Init+0x58>
 906:	81 30       	cpi	r24, 0x01	; 1
 908:	20 f0       	brcs	.+8      	; 0x912 <Timer_Init+0x36>
 90a:	82 30       	cpi	r24, 0x02	; 2
 90c:	09 f0       	breq	.+2      	; 0x910 <Timer_Init+0x34>
 90e:	cd c0       	rjmp	.+410    	; 0xaaa <Timer_Init+0x1ce>
 910:	24 c0       	rjmp	.+72     	; 0x95a <Timer_Init+0x7e>
          case TIMER_MODE:
              {
                switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 912:	8a 81       	ldd	r24, Y+2	; 0x02
 914:	88 23       	and	r24, r24
 916:	21 f0       	breq	.+8      	; 0x920 <Timer_Init+0x44>
 918:	81 30       	cpi	r24, 0x01	; 1
 91a:	09 f0       	breq	.+2      	; 0x91e <Timer_Init+0x42>
 91c:	c8 c0       	rjmp	.+400    	; 0xaae <Timer_Init+0x1d2>
 91e:	04 c0       	rjmp	.+8      	; 0x928 <Timer_Init+0x4c>
				{
                    case TIMER_POLLING_MODE:
                        {/*Disable interrupts for T0 without effecting any other timer*/
                         /*without Disabling Global interrupt*/
                        TIMSK &=T0_INTERRUPT_DISABLE;
 920:	89 b7       	in	r24, 0x39	; 57
 922:	8c 7f       	andi	r24, 0xFC	; 252
 924:	89 bf       	out	0x39, r24	; 57
                            break;
 926:	2c c0       	rjmp	.+88     	; 0x980 <Timer_Init+0xa4>
                         }
                                  case TIMER_INTERRUPT_MODE:
                                  { /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
                                    */
                                    G_interrupt_Enable();
 928:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                                    TIMSK |= T0_INTERRUPT_NORMAL;
 92c:	89 b7       	in	r24, 0x39	; 57
 92e:	81 60       	ori	r24, 0x01	; 1
 930:	89 bf       	out	0x39, r24	; 57
                                    break;
 932:	26 c0       	rjmp	.+76     	; 0x980 <Timer_Init+0xa4>
/*                             TIMER 0 As a COUNTER_RISING_MODE          */
/*************************************************************************/

                          case COUNTER_RISING_MODE:
                            {
                                  TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
 934:	83 b7       	in	r24, 0x33	; 51
 936:	8d 60       	ori	r24, 0x0D	; 13
 938:	83 bf       	out	0x33, r24	; 51
                                    switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 93a:	8a 81       	ldd	r24, Y+2	; 0x02
 93c:	88 23       	and	r24, r24
 93e:	21 f0       	breq	.+8      	; 0x948 <Timer_Init+0x6c>
 940:	81 30       	cpi	r24, 0x01	; 1
 942:	09 f0       	breq	.+2      	; 0x946 <Timer_Init+0x6a>
 944:	b6 c0       	rjmp	.+364    	; 0xab2 <Timer_Init+0x1d6>
 946:	04 c0       	rjmp	.+8      	; 0x950 <Timer_Init+0x74>
                                        case TIMER_POLLING_MODE:
                                          {
            /*Disable interrupts for T0 without effecting any other timer*/
              /*without Disabling Global interrupt*/
                                            TIMSK &=T0_INTERRUPT_DISABLE;
 948:	89 b7       	in	r24, 0x39	; 57
 94a:	8c 7f       	andi	r24, 0xFC	; 252
 94c:	89 bf       	out	0x39, r24	; 57
                                            break;
 94e:	05 c0       	rjmp	.+10     	; 0x95a <Timer_Init+0x7e>

                                          case TIMER_INTERRUPT_MODE:
                                           /*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
                                              */
                                              G_interrupt_Enable();
 950:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                                              TIMSK |= T0_INTERRUPT_NORMAL;
 954:	89 b7       	in	r24, 0x39	; 57
 956:	81 60       	ori	r24, 0x01	; 1
 958:	89 bf       	out	0x39, r24	; 57
/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
/*************************************************************************/

                                    case COUNTER_FALLING_MODE:
                                    {
                                        TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
 95a:	83 b7       	in	r24, 0x33	; 51
 95c:	8c 60       	ori	r24, 0x0C	; 12
 95e:	83 bf       	out	0x33, r24	; 51
                                          switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 960:	8a 81       	ldd	r24, Y+2	; 0x02
 962:	88 23       	and	r24, r24
 964:	21 f0       	breq	.+8      	; 0x96e <Timer_Init+0x92>
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	09 f0       	breq	.+2      	; 0x96c <Timer_Init+0x90>
 96a:	a5 c0       	rjmp	.+330    	; 0xab6 <Timer_Init+0x1da>
 96c:	04 c0       	rjmp	.+8      	; 0x976 <Timer_Init+0x9a>
                                              case TIMER_POLLING_MODE:
                                                {

            /*Disable interrupts for T0 without effecting any other timer*/
                /*without Disabling Global interrupt*/
                                                  TIMSK &=T0_INTERRUPT_DISABLE;
 96e:	89 b7       	in	r24, 0x39	; 57
 970:	8c 7f       	andi	r24, 0xFC	; 252
 972:	89 bf       	out	0x39, r24	; 57

                                                  break;
 974:	05 c0       	rjmp	.+10     	; 0x980 <Timer_Init+0xa4>
                                                case TIMER_INTERRUPT_MODE:
                                                  {
                                                    /*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
                                                    */
                                                    G_interrupt_Enable();
 976:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;
 97a:	89 b7       	in	r24, 0x39	; 57
 97c:	81 60       	ori	r24, 0x01	; 1
 97e:	89 bf       	out	0x39, r24	; 57
/*************************************************************************/

    case TIMER_CH1:
        {

    switch (Timer_cfg->Timer_Mode)
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	81 30       	cpi	r24, 0x01	; 1
 984:	d9 f0       	breq	.+54     	; 0x9bc <Timer_Init+0xe0>
 986:	81 30       	cpi	r24, 0x01	; 1
 988:	20 f0       	brcs	.+8      	; 0x992 <Timer_Init+0xb6>
 98a:	82 30       	cpi	r24, 0x02	; 2
 98c:	09 f0       	breq	.+2      	; 0x990 <Timer_Init+0xb4>
 98e:	95 c0       	rjmp	.+298    	; 0xaba <Timer_Init+0x1de>
 990:	2d c0       	rjmp	.+90     	; 0x9ec <Timer_Init+0x110>
    {
      case TIMER_MODE:
      {
        TCCR1 = T1_NORMAL_MODE_CONFIG;
 992:	1f bc       	out	0x2f, r1	; 47
 994:	1e bc       	out	0x2e, r1	; 46
              switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 996:	8a 81       	ldd	r24, Y+2	; 0x02
 998:	88 23       	and	r24, r24
 99a:	21 f0       	breq	.+8      	; 0x9a4 <Timer_Init+0xc8>
 99c:	81 30       	cpi	r24, 0x01	; 1
 99e:	09 f0       	breq	.+2      	; 0x9a2 <Timer_Init+0xc6>
 9a0:	8e c0       	rjmp	.+284    	; 0xabe <Timer_Init+0x1e2>
 9a2:	05 c0       	rjmp	.+10     	; 0x9ae <Timer_Init+0xd2>
              case TIMER_POLLING_MODE:
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;
 9a4:	89 b7       	in	r24, 0x39	; 57
 9a6:	83 7c       	andi	r24, 0xC3	; 195
 9a8:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 9aa:	80 e0       	ldi	r24, 0x00	; 0
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;

                break;
 9ac:	95 c0       	rjmp	.+298    	; 0xad8 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 9ae:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 9b2:	89 b7       	in	r24, 0x39	; 57
 9b4:	84 60       	ori	r24, 0x04	; 4
 9b6:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 9b8:	80 e0       	ldi	r24, 0x00	; 0
                G_interrupt_Enable();
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 9ba:	8e c0       	rjmp	.+284    	; 0xad8 <Timer_Init+0x1fc>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
            TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
 9bc:	8e b5       	in	r24, 0x2e	; 46
 9be:	9f b5       	in	r25, 0x2f	; 47
 9c0:	87 60       	ori	r24, 0x07	; 7
 9c2:	9f bd       	out	0x2f, r25	; 47
 9c4:	8e bd       	out	0x2e, r24	; 46

            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 9c6:	8a 81       	ldd	r24, Y+2	; 0x02
 9c8:	88 23       	and	r24, r24
 9ca:	21 f0       	breq	.+8      	; 0x9d4 <Timer_Init+0xf8>
 9cc:	81 30       	cpi	r24, 0x01	; 1
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <Timer_Init+0xf6>
 9d0:	78 c0       	rjmp	.+240    	; 0xac2 <Timer_Init+0x1e6>
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <Timer_Init+0x102>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 9d4:	89 b7       	in	r24, 0x39	; 57
 9d6:	83 7c       	andi	r24, 0xC3	; 195
 9d8:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 9da:	80 e0       	ldi	r24, 0x00	; 0
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;

                break;
 9dc:	7d c0       	rjmp	.+250    	; 0xad8 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 9de:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 9e2:	89 b7       	in	r24, 0x39	; 57
 9e4:	84 60       	ori	r24, 0x04	; 4
 9e6:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 9e8:	80 e0       	ldi	r24, 0x00	; 0
                G_interrupt_Enable();
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 9ea:	76 c0       	rjmp	.+236    	; 0xad8 <Timer_Init+0x1fc>
            }
        break;
      }
      case COUNTER_FALLING_MODE:
      {
            TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
 9ec:	8e b5       	in	r24, 0x2e	; 46
 9ee:	9f b5       	in	r25, 0x2f	; 47
 9f0:	86 60       	ori	r24, 0x06	; 6
 9f2:	9f bd       	out	0x2f, r25	; 47
 9f4:	8e bd       	out	0x2e, r24	; 46
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 9f6:	8a 81       	ldd	r24, Y+2	; 0x02
 9f8:	88 23       	and	r24, r24
 9fa:	21 f0       	breq	.+8      	; 0xa04 <Timer_Init+0x128>
 9fc:	81 30       	cpi	r24, 0x01	; 1
 9fe:	09 f0       	breq	.+2      	; 0xa02 <Timer_Init+0x126>
 a00:	62 c0       	rjmp	.+196    	; 0xac6 <Timer_Init+0x1ea>
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <Timer_Init+0x132>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 a04:	89 b7       	in	r24, 0x39	; 57
 a06:	83 7c       	andi	r24, 0xC3	; 195
 a08:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 a0a:	80 e0       	ldi	r24, 0x00	; 0
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
                break;
 a0c:	65 c0       	rjmp	.+202    	; 0xad8 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 a0e:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 a12:	89 b7       	in	r24, 0x39	; 57
 a14:	84 60       	ori	r24, 0x04	; 4
 a16:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 a18:	80 e0       	ldi	r24, 0x00	; 0
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */

                break;
 a1a:	5e c0       	rjmp	.+188    	; 0xad8 <Timer_Init+0x1fc>
  /*                             TIMER 2                                   */
  /*************************************************************************/

  case TIMER_CH2:
  {
TCCR2 |=T2_NORMAL_MODE_CONFIG;
 a1c:	85 b5       	in	r24, 0x25	; 37
 a1e:	85 bd       	out	0x25, r24	; 37
    switch (Timer_cfg->Timer_Mode) {
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	88 23       	and	r24, r24
 a24:	21 f0       	breq	.+8      	; 0xa2e <Timer_Init+0x152>
 a26:	81 30       	cpi	r24, 0x01	; 1
 a28:	09 f0       	breq	.+2      	; 0xa2c <Timer_Init+0x150>
 a2a:	4f c0       	rjmp	.+158    	; 0xaca <Timer_Init+0x1ee>
 a2c:	11 c0       	rjmp	.+34     	; 0xa50 <Timer_Init+0x174>
      case TIMER_MODE:
      {
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 a2e:	8a 81       	ldd	r24, Y+2	; 0x02
 a30:	88 23       	and	r24, r24
 a32:	21 f0       	breq	.+8      	; 0xa3c <Timer_Init+0x160>
 a34:	81 30       	cpi	r24, 0x01	; 1
 a36:	09 f0       	breq	.+2      	; 0xa3a <Timer_Init+0x15e>
 a38:	4a c0       	rjmp	.+148    	; 0xace <Timer_Init+0x1f2>
 a3a:	04 c0       	rjmp	.+8      	; 0xa44 <Timer_Init+0x168>
              case TIMER_POLLING_MODE:
              {
                  TIMSK &= T2_INTERRUPT_DISABLE;
 a3c:	89 b7       	in	r24, 0x39	; 57
 a3e:	8f 73       	andi	r24, 0x3F	; 63
 a40:	89 bf       	out	0x39, r24	; 57
                break;
 a42:	32 c0       	rjmp	.+100    	; 0xaa8 <Timer_Init+0x1cc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 a44:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 a48:	89 b7       	in	r24, 0x39	; 57
 a4a:	80 6c       	ori	r24, 0xC0	; 192
 a4c:	89 bf       	out	0x39, r24	; 57

                break;
 a4e:	2c c0       	rjmp	.+88     	; 0xaa8 <Timer_Init+0x1cc>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
          ASSR |=0x08;
 a50:	82 b5       	in	r24, 0x22	; 34
 a52:	88 60       	ori	r24, 0x08	; 8
 a54:	82 bd       	out	0x22, r24	; 34
            switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	81 30       	cpi	r24, 0x01	; 1
 a5a:	51 f0       	breq	.+20     	; 0xa70 <Timer_Init+0x194>
 a5c:	81 30       	cpi	r24, 0x01	; 1
 a5e:	18 f0       	brcs	.+6      	; 0xa66 <Timer_Init+0x18a>
 a60:	82 30       	cpi	r24, 0x02	; 2
 a62:	b9 f5       	brne	.+110    	; 0xad2 <Timer_Init+0x1f6>
 a64:	0c c0       	rjmp	.+24     	; 0xa7e <Timer_Init+0x1a2>
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;
 a66:	89 b7       	in	r24, 0x39	; 57
 a68:	8f 73       	andi	r24, 0x3F	; 63
 a6a:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 a6c:	81 e0       	ldi	r24, 0x01	; 1
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;

                break;
 a6e:	34 c0       	rjmp	.+104    	; 0xad8 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 a70:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 a74:	89 b7       	in	r24, 0x39	; 57
 a76:	80 6c       	ori	r24, 0xC0	; 192
 a78:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 a7a:	81 e0       	ldi	r24, 0x01	; 1
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
                  TIMSK|=T2_INTERRUPT_NORMAL;
                break;
 a7c:	2d c0       	rjmp	.+90     	; 0xad8 <Timer_Init+0x1fc>
              }
              case COUNTER_FALLING_MODE:
              {
                  ASSR |=0x08;
 a7e:	82 b5       	in	r24, 0x22	; 34
 a80:	88 60       	ori	r24, 0x08	; 8
 a82:	82 bd       	out	0x22, r24	; 34
                    switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 a84:	8a 81       	ldd	r24, Y+2	; 0x02
 a86:	88 23       	and	r24, r24
 a88:	19 f0       	breq	.+6      	; 0xa90 <Timer_Init+0x1b4>
 a8a:	81 30       	cpi	r24, 0x01	; 1
 a8c:	21 f5       	brne	.+72     	; 0xad6 <Timer_Init+0x1fa>
 a8e:	05 c0       	rjmp	.+10     	; 0xa9a <Timer_Init+0x1be>
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;
 a90:	89 b7       	in	r24, 0x39	; 57
 a92:	8f 73       	andi	r24, 0x3F	; 63
 a94:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 a96:	81 e0       	ldi	r24, 0x01	; 1
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;

                        break;
 a98:	1f c0       	rjmp	.+62     	; 0xad8 <Timer_Init+0x1fc>
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
 a9a:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                          TIMSK|=T2_INTERRUPT_NORMAL;
 a9e:	89 b7       	in	r24, 0x39	; 57
 aa0:	80 6c       	ori	r24, 0xC0	; 192
 aa2:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 aa4:	81 e0       	ldi	r24, 0x01	; 1
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
                          TIMSK|=T2_INTERRUPT_NORMAL;
                        break;
 aa6:	18 c0       	rjmp	.+48     	; 0xad8 <Timer_Init+0x1fc>
 aa8:	17 c0       	rjmp	.+46     	; 0xad8 <Timer_Init+0x1fc>
                                                  return E_NOK;
                                                }
                                      break;
                                      }
                                      default:
                                      return E_NOK;
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	15 c0       	rjmp	.+42     	; 0xad8 <Timer_Init+0x1fc>
                                    G_interrupt_Enable();
                                    TIMSK |= T0_INTERRUPT_NORMAL;
                                    break;
                                  }
                                  default :
                                  return E_NOK;
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	13 c0       	rjmp	.+38     	; 0xad8 <Timer_Init+0x1fc>
                                              G_interrupt_Enable();
                                              TIMSK |= T0_INTERRUPT_NORMAL;
                                              break;

                                          default :
                                          return E_NOK;
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	11 c0       	rjmp	.+34     	; 0xad8 <Timer_Init+0x1fc>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;

                                                    break;
                                                  }
                                                  default:
                                                  return E_NOK;
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	0f c0       	rjmp	.+30     	; 0xad8 <Timer_Init+0x1fc>
              return E_NOK;
            }
      break;
      }
      default :
      return E_NOK;
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <Timer_Init+0x1fc>
                Enable Timer0 interrupt
                */
                break;
              }
              default :
              return E_NOK;
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	0b c0       	rjmp	.+22     	; 0xad8 <Timer_Init+0x1fc>
                Enable Timer0 interrupt
                */
                break;
              }
              default:
              return E_NOK;
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	09 c0       	rjmp	.+18     	; 0xad8 <Timer_Init+0x1fc>
                */

                break;
              }
              default :
              return E_NOK;
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	07 c0       	rjmp	.+14     	; 0xad8 <Timer_Init+0x1fc>
            }
        break;
            }
            }
  default:
  return E_NOK;
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <Timer_Init+0x1fc>
                  TIMSK|=T2_INTERRUPT_NORMAL;

                break;
              }
              default :
              return E_NOK;
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <Timer_Init+0x1fc>
            }
        break;
            }
            }
  default:
  return E_NOK;
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <Timer_Init+0x1fc>
                          TIMSK|=T2_INTERRUPT_NORMAL;
                        break;
                      }

              default :
              return E_NOK;
 ad6:	81 e0       	ldi	r24, 0x01	; 1

}
 }

}
}
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	08 95       	ret

00000ade <Timer_Start>:
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
uint8_t Ret;
switch (Timer_CH_NO) {
 ade:	81 30       	cpi	r24, 0x01	; 1
 ae0:	09 f4       	brne	.+2      	; 0xae4 <Timer_Start+0x6>
 ae2:	4f c0       	rjmp	.+158    	; 0xb82 <Timer_Start+0xa4>
 ae4:	81 30       	cpi	r24, 0x01	; 1
 ae6:	20 f0       	brcs	.+8      	; 0xaf0 <Timer_Start+0x12>
 ae8:	82 30       	cpi	r24, 0x02	; 2
 aea:	09 f0       	breq	.+2      	; 0xaee <Timer_Start+0x10>
 aec:	f3 c0       	rjmp	.+486    	; 0xcd4 <Timer_Start+0x1f6>
 aee:	97 c0       	rjmp	.+302    	; 0xc1e <Timer_Start+0x140>
case TIMER_CH0:{/***********************************************************************************************************************/
switch(prescaler_value){
 af0:	80 91 7c 00 	lds	r24, 0x007C
 af4:	84 30       	cpi	r24, 0x04	; 4
 af6:	21 f1       	breq	.+72     	; 0xb40 <Timer_Start+0x62>
 af8:	85 30       	cpi	r24, 0x05	; 5
 afa:	30 f4       	brcc	.+12     	; 0xb08 <Timer_Start+0x2a>
 afc:	81 30       	cpi	r24, 0x01	; 1
 afe:	51 f0       	breq	.+20     	; 0xb14 <Timer_Start+0x36>
 b00:	82 30       	cpi	r24, 0x02	; 2
 b02:	09 f0       	breq	.+2      	; 0xb06 <Timer_Start+0x28>
 b04:	e9 c0       	rjmp	.+466    	; 0xcd8 <Timer_Start+0x1fa>
 b06:	11 c0       	rjmp	.+34     	; 0xb2a <Timer_Start+0x4c>
 b08:	86 30       	cpi	r24, 0x06	; 6
 b0a:	29 f1       	breq	.+74     	; 0xb56 <Timer_Start+0x78>
 b0c:	87 30       	cpi	r24, 0x07	; 7
 b0e:	09 f0       	breq	.+2      	; 0xb12 <Timer_Start+0x34>
 b10:	e3 c0       	rjmp	.+454    	; 0xcd8 <Timer_Start+0x1fa>
 b12:	2c c0       	rjmp	.+88     	; 0xb6c <Timer_Start+0x8e>
case TIMER_PRESCALER_NO :{
if(Timer_Count < MAX0){
 b14:	6f 3f       	cpi	r22, 0xFF	; 255
 b16:	71 05       	cpc	r23, r1
 b18:	08 f0       	brcs	.+2      	; 0xb1c <Timer_Start+0x3e>
 b1a:	e0 c0       	rjmp	.+448    	; 0xcdc <Timer_Start+0x1fe>
TCCR0 |=TIMER_PRESCALER_NO;
 b1c:	83 b7       	in	r24, 0x33	; 51
 b1e:	81 60       	ori	r24, 0x01	; 1
 b20:	83 bf       	out	0x33, r24	; 51
TCNT0 =	MAX0 - Timer_Count;
 b22:	60 95       	com	r22
 b24:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_8 :{
if(Timer_Count < MAX0){
 b2a:	6f 3f       	cpi	r22, 0xFF	; 255
 b2c:	71 05       	cpc	r23, r1
 b2e:	08 f0       	brcs	.+2      	; 0xb32 <Timer_Start+0x54>
 b30:	d7 c0       	rjmp	.+430    	; 0xce0 <Timer_Start+0x202>
TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
 b32:	83 b7       	in	r24, 0x33	; 51
 b34:	82 60       	ori	r24, 0x02	; 2
 b36:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b38:	60 95       	com	r22
 b3a:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_64 :{
if(Timer_Count < MAX0){
 b40:	6f 3f       	cpi	r22, 0xFF	; 255
 b42:	71 05       	cpc	r23, r1
 b44:	08 f0       	brcs	.+2      	; 0xb48 <Timer_Start+0x6a>
 b46:	ce c0       	rjmp	.+412    	; 0xce4 <Timer_Start+0x206>
TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
 b48:	83 b7       	in	r24, 0x33	; 51
 b4a:	83 60       	ori	r24, 0x03	; 3
 b4c:	83 bf       	out	0x33, r24	; 51
TCNT0 = MAX0 - Timer_Count;
 b4e:	60 95       	com	r22
 b50:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_256 :{
if(Timer_Count < MAX0){
 b56:	6f 3f       	cpi	r22, 0xFF	; 255
 b58:	71 05       	cpc	r23, r1
 b5a:	08 f0       	brcs	.+2      	; 0xb5e <Timer_Start+0x80>
 b5c:	c5 c0       	rjmp	.+394    	; 0xce8 <Timer_Start+0x20a>
TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
 b5e:	83 b7       	in	r24, 0x33	; 51
 b60:	84 60       	ori	r24, 0x04	; 4
 b62:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b64:	60 95       	com	r22
 b66:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b68:	80 e0       	ldi	r24, 0x00	; 0
 b6a:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_1024 :{
if(Timer_Count < MAX0){
 b6c:	6f 3f       	cpi	r22, 0xFF	; 255
 b6e:	71 05       	cpc	r23, r1
 b70:	08 f0       	brcs	.+2      	; 0xb74 <Timer_Start+0x96>
 b72:	bc c0       	rjmp	.+376    	; 0xcec <Timer_Start+0x20e>
TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
 b74:	83 b7       	in	r24, 0x33	; 51
 b76:	85 60       	ori	r24, 0x05	; 5
 b78:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b7a:	60 95       	com	r22
 b7c:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	08 95       	ret
break;
}
case TIMER_CH1:{

  switch(prescaler_value){
 b82:	80 91 7c 00 	lds	r24, 0x007C
 b86:	84 30       	cpi	r24, 0x04	; 4
 b88:	31 f1       	breq	.+76     	; 0xbd6 <Timer_Start+0xf8>
 b8a:	85 30       	cpi	r24, 0x05	; 5
 b8c:	30 f4       	brcc	.+12     	; 0xb9a <Timer_Start+0xbc>
 b8e:	81 30       	cpi	r24, 0x01	; 1
 b90:	51 f0       	breq	.+20     	; 0xba6 <Timer_Start+0xc8>
 b92:	82 30       	cpi	r24, 0x02	; 2
 b94:	09 f0       	breq	.+2      	; 0xb98 <Timer_Start+0xba>
 b96:	ac c0       	rjmp	.+344    	; 0xcf0 <Timer_Start+0x212>
 b98:	12 c0       	rjmp	.+36     	; 0xbbe <Timer_Start+0xe0>
 b9a:	86 30       	cpi	r24, 0x06	; 6
 b9c:	41 f1       	breq	.+80     	; 0xbee <Timer_Start+0x110>
 b9e:	87 30       	cpi	r24, 0x07	; 7
 ba0:	09 f0       	breq	.+2      	; 0xba4 <Timer_Start+0xc6>
 ba2:	a6 c0       	rjmp	.+332    	; 0xcf0 <Timer_Start+0x212>
 ba4:	30 c0       	rjmp	.+96     	; 0xc06 <Timer_Start+0x128>
  case TIMER_PRESCALER_NO :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER_PRESCALER_NO;
 ba6:	8e b5       	in	r24, 0x2e	; 46
 ba8:	9f b5       	in	r25, 0x2f	; 47
 baa:	81 60       	ori	r24, 0x01	; 1
 bac:	9f bd       	out	0x2f, r25	; 47
 bae:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 bb0:	70 95       	com	r23
 bb2:	61 95       	neg	r22
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	7d bd       	out	0x2d, r23	; 45
 bb8:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bba:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret=E_NOK;
  }
  break;
 bbc:	08 95       	ret
  }
  case TIMER_PRESCALER_8 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
 bbe:	8e b5       	in	r24, 0x2e	; 46
 bc0:	9f b5       	in	r25, 0x2f	; 47
 bc2:	82 60       	ori	r24, 0x02	; 2
 bc4:	9f bd       	out	0x2f, r25	; 47
 bc6:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 bc8:	70 95       	com	r23
 bca:	61 95       	neg	r22
 bcc:	7f 4f       	sbci	r23, 0xFF	; 255
 bce:	7d bd       	out	0x2d, r23	; 45
 bd0:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bd2:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 bd4:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
 bd6:	8e b5       	in	r24, 0x2e	; 46
 bd8:	9f b5       	in	r25, 0x2f	; 47
 bda:	83 60       	ori	r24, 0x03	; 3
 bdc:	9f bd       	out	0x2f, r25	; 47
 bde:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 be0:	70 95       	com	r23
 be2:	61 95       	neg	r22
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	7d bd       	out	0x2d, r23	; 45
 be8:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bea:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 bec:	08 95       	ret
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
 bee:	8e b5       	in	r24, 0x2e	; 46
 bf0:	9f b5       	in	r25, 0x2f	; 47
 bf2:	84 60       	ori	r24, 0x04	; 4
 bf4:	9f bd       	out	0x2f, r25	; 47
 bf6:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255
 bfe:	7d bd       	out	0x2d, r23	; 45
 c00:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 c02:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 c04:	08 95       	ret
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
 c06:	8e b5       	in	r24, 0x2e	; 46
 c08:	9f b5       	in	r25, 0x2f	; 47
 c0a:	85 60       	ori	r24, 0x05	; 5
 c0c:	9f bd       	out	0x2f, r25	; 47
 c0e:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	7d bd       	out	0x2d, r23	; 45
 c18:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 c1a:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 c1c:	08 95       	ret
	break;
}
case TIMER_CH2:
	{
  
		switch(prescaler_value){
 c1e:	80 91 7c 00 	lds	r24, 0x007C
 c22:	84 30       	cpi	r24, 0x04	; 4
 c24:	79 f1       	breq	.+94     	; 0xc84 <Timer_Start+0x1a6>
 c26:	85 30       	cpi	r24, 0x05	; 5
 c28:	40 f4       	brcc	.+16     	; 0xc3a <Timer_Start+0x15c>
 c2a:	82 30       	cpi	r24, 0x02	; 2
 c2c:	c9 f0       	breq	.+50     	; 0xc60 <Timer_Start+0x182>
 c2e:	83 30       	cpi	r24, 0x03	; 3
 c30:	10 f5       	brcc	.+68     	; 0xc76 <Timer_Start+0x198>
 c32:	81 30       	cpi	r24, 0x01	; 1
 c34:	09 f0       	breq	.+2      	; 0xc38 <Timer_Start+0x15a>
 c36:	5e c0       	rjmp	.+188    	; 0xcf4 <Timer_Start+0x216>
 c38:	08 c0       	rjmp	.+16     	; 0xc4a <Timer_Start+0x16c>
 c3a:	86 30       	cpi	r24, 0x06	; 6
 c3c:	b9 f1       	breq	.+110    	; 0xcac <Timer_Start+0x1ce>
 c3e:	86 30       	cpi	r24, 0x06	; 6
 c40:	58 f1       	brcs	.+86     	; 0xc98 <Timer_Start+0x1ba>
 c42:	87 30       	cpi	r24, 0x07	; 7
 c44:	09 f0       	breq	.+2      	; 0xc48 <Timer_Start+0x16a>
 c46:	56 c0       	rjmp	.+172    	; 0xcf4 <Timer_Start+0x216>
 c48:	3b c0       	rjmp	.+118    	; 0xcc0 <Timer_Start+0x1e2>
   
		  case TIMER_PRESCALER_NO :
			{
    
				if(Timer_Count < MAX0){
 c4a:	6f 3f       	cpi	r22, 0xFF	; 255
 c4c:	71 05       	cpc	r23, r1
 c4e:	08 f0       	brcs	.+2      	; 0xc52 <Timer_Start+0x174>
 c50:	53 c0       	rjmp	.+166    	; 0xcf8 <Timer_Start+0x21a>
     
			      TCCR2 |= TIMER_PRESCALER_NO;
 c52:	85 b5       	in	r24, 0x25	; 37
 c54:	81 60       	ori	r24, 0x01	; 1
 c56:	85 bd       	out	0x25, r24	; 37
		      
				  TCNT2 = MAX2 - Timer_Count;
 c58:	60 95       	com	r22
 c5a:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	08 95       	ret
			break;
			}

case TIMER_PRESCALER_8 :
  {
          if(Timer_Count < MAX0)
 c60:	6f 3f       	cpi	r22, 0xFF	; 255
 c62:	71 05       	cpc	r23, r1
 c64:	08 f0       	brcs	.+2      	; 0xc68 <Timer_Start+0x18a>
 c66:	4a c0       	rjmp	.+148    	; 0xcfc <Timer_Start+0x21e>
            {
           TCCR2 |=TIMER_PRESCALER_8;
 c68:	85 b5       	in	r24, 0x25	; 37
 c6a:	82 60       	ori	r24, 0x02	; 2
 c6c:	85 bd       	out	0x25, r24	; 37
           TCNT2 =MAX2 - Timer_Count;
 c6e:	60 95       	com	r22
 c70:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c72:	80 e0       	ldi	r24, 0x00	; 0
 c74:	08 95       	ret
  }
  case TIMER_PRESCALER_32:
  {
    if(Timer_Count < MAX1)
         {
         TCCR2 |=TIMER_PRESCALER_32;
 c76:	85 b5       	in	r24, 0x25	; 37
 c78:	83 60       	ori	r24, 0x03	; 3
 c7a:	85 bd       	out	0x25, r24	; 37
         TCNT2 =MAX2 - Timer_Count;
 c7c:	60 95       	com	r22
 c7e:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c80:	80 e0       	ldi	r24, 0x00	; 0
        else
        {
    Ret=E_NOK;
  }

    break;
 c82:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :
  {
       if(Timer_Count < MAX2)
 c84:	6f 3f       	cpi	r22, 0xFF	; 255
 c86:	71 05       	cpc	r23, r1
 c88:	d8 f5       	brcc	.+118    	; 0xd00 <Timer_Start+0x222>
       {
       TCCR2 |=TIMER_PRESCALER_64;
 c8a:	85 b5       	in	r24, 0x25	; 37
 c8c:	84 60       	ori	r24, 0x04	; 4
 c8e:	85 bd       	out	0x25, r24	; 37
       TCNT2 =MAX2 - Timer_Count;
 c90:	60 95       	com	r22
 c92:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	08 95       	ret
  Ret=E_NOK;
  }
  break;
  }
  case TIMER_PRESCALER_128 :{
  if(Timer_Count < MAX2){
 c98:	6f 3f       	cpi	r22, 0xFF	; 255
 c9a:	71 05       	cpc	r23, r1
 c9c:	98 f5       	brcc	.+102    	; 0xd04 <Timer_Start+0x226>
  TCCR2 |= TIMER_PRESCALER_128;
 c9e:	85 b5       	in	r24, 0x25	; 37
 ca0:	85 60       	ori	r24, 0x05	; 5
 ca2:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 ca4:	60 95       	com	r22
 ca6:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 ca8:	80 e0       	ldi	r24, 0x00	; 0
 caa:	08 95       	ret
  Ret= E_NOK;
    }
  break;
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX2){
 cac:	6f 3f       	cpi	r22, 0xFF	; 255
 cae:	71 05       	cpc	r23, r1
 cb0:	58 f5       	brcc	.+86     	; 0xd08 <Timer_Start+0x22a>
  TCCR2 |= TIMER_PRESCALER_256;
 cb2:	85 b5       	in	r24, 0x25	; 37
 cb4:	86 60       	ori	r24, 0x06	; 6
 cb6:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 cb8:	60 95       	com	r22
 cba:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 cbc:	80 e0       	ldi	r24, 0x00	; 0
 cbe:	08 95       	ret

  }
  break;
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX2){
 cc0:	6f 3f       	cpi	r22, 0xFF	; 255
 cc2:	71 05       	cpc	r23, r1
 cc4:	18 f5       	brcc	.+70     	; 0xd0c <Timer_Start+0x22e>
  TCCR2 |=TIMER_PRESCALER_1024;
 cc6:	85 b5       	in	r24, 0x25	; 37
 cc8:	87 60       	ori	r24, 0x07	; 7
 cca:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 ccc:	60 95       	com	r22
 cce:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 cd0:	80 e0       	ldi	r24, 0x00	; 0
 cd2:	08 95       	ret
break;
}
default:
Ret= E_NOK;
 cd4:	81 e0       	ldi	r24, 0x01	; 1
 cd6:	08 95       	ret
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 cd8:	80 e0       	ldi	r24, 0x00	; 0
 cda:	08 95       	ret
 cdc:	80 e0       	ldi	r24, 0x00	; 0
 cde:	08 95       	ret
 ce0:	80 e0       	ldi	r24, 0x00	; 0
 ce2:	08 95       	ret
 ce4:	80 e0       	ldi	r24, 0x00	; 0
 ce6:	08 95       	ret
 ce8:	80 e0       	ldi	r24, 0x00	; 0
 cea:	08 95       	ret
 cec:	80 e0       	ldi	r24, 0x00	; 0
 cee:	08 95       	ret
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 cf0:	80 e0       	ldi	r24, 0x00	; 0
 cf2:	08 95       	ret
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	08 95       	ret
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	08 95       	ret
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	08 95       	ret
 d00:	80 e0       	ldi	r24, 0x00	; 0
 d02:	08 95       	ret
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	08 95       	ret
 d08:	80 e0       	ldi	r24, 0x00	; 0
 d0a:	08 95       	ret
 d0c:	80 e0       	ldi	r24, 0x00	; 0
Ret= E_NOK;
break;
}
return Ret;

}
 d0e:	08 95       	ret

00000d10 <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret;
switch (Timer_CH_NO) {
 d10:	81 30       	cpi	r24, 0x01	; 1
 d12:	51 f0       	breq	.+20     	; 0xd28 <Timer_Stop+0x18>
 d14:	81 30       	cpi	r24, 0x01	; 1
 d16:	18 f0       	brcs	.+6      	; 0xd1e <Timer_Stop+0xe>
 d18:	82 30       	cpi	r24, 0x02	; 2
 d1a:	91 f4       	brne	.+36     	; 0xd40 <Timer_Stop+0x30>
 d1c:	0c c0       	rjmp	.+24     	; 0xd36 <Timer_Stop+0x26>
  case TIMER_CH0:
  {
		TCCR0 &=0xF8;
 d1e:	83 b7       	in	r24, 0x33	; 51
 d20:	88 7f       	andi	r24, 0xF8	; 248
 d22:	83 bf       	out	0x33, r24	; 51
		Ret=E_OK;
 d24:	80 e0       	ldi	r24, 0x00	; 0
		break;
 d26:	08 95       	ret
  }
  case TIMER_CH1:
  {
	     TCCR1 &=0xFFF8;
 d28:	8e b5       	in	r24, 0x2e	; 46
 d2a:	9f b5       	in	r25, 0x2f	; 47
 d2c:	88 7f       	andi	r24, 0xF8	; 248
 d2e:	9f bd       	out	0x2f, r25	; 47
 d30:	8e bd       	out	0x2e, r24	; 46
		 Ret=E_OK;
 d32:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 d34:	08 95       	ret
  }
  case TIMER_CH2:
    {
		 TCCR2 &= 0xF8;
 d36:	85 b5       	in	r24, 0x25	; 37
 d38:	88 7f       	andi	r24, 0xF8	; 248
 d3a:	85 bd       	out	0x25, r24	; 37
		 Ret=E_OK;
 d3c:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 d3e:	08 95       	ret
    }
  default :
  Ret=E_NOK;
 d40:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;

}
 d42:	08 95       	ret

00000d44 <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{
  switch (Timer_CH_NO) {
 d44:	81 30       	cpi	r24, 0x01	; 1
 d46:	59 f0       	breq	.+22     	; 0xd5e <Timer_GetStatus+0x1a>
 d48:	81 30       	cpi	r24, 0x01	; 1
 d4a:	18 f0       	brcs	.+6      	; 0xd52 <Timer_GetStatus+0xe>
 d4c:	82 30       	cpi	r24, 0x02	; 2
 d4e:	c9 f4       	brne	.+50     	; 0xd82 <Timer_GetStatus+0x3e>
 d50:	0e c0       	rjmp	.+28     	; 0xd6e <Timer_GetStatus+0x2a>
    case TIMER_CH0:
    {
  *Data =((TIFR>>TOV0)&1);
 d52:	88 b7       	in	r24, 0x38	; 56
 d54:	81 70       	andi	r24, 0x01	; 1
 d56:	fb 01       	movw	r30, r22
 d58:	80 83       	st	Z, r24
    return E_OK;
 d5a:	80 e0       	ldi	r24, 0x00	; 0
 d5c:	08 95       	ret
    }
    case TIMER_CH1:
    {
    *Data =((TIFR>>TOV1)&1);
 d5e:	88 b7       	in	r24, 0x38	; 56
 d60:	86 95       	lsr	r24
 d62:	86 95       	lsr	r24
 d64:	81 70       	andi	r24, 0x01	; 1
 d66:	fb 01       	movw	r30, r22
 d68:	80 83       	st	Z, r24
    return E_OK;
 d6a:	80 e0       	ldi	r24, 0x00	; 0
 d6c:	08 95       	ret
    }
     case TIMER_CH2:
      {
  *Data =((TIFR>>TOV2)&1);
 d6e:	88 b7       	in	r24, 0x38	; 56
 d70:	82 95       	swap	r24
 d72:	86 95       	lsr	r24
 d74:	86 95       	lsr	r24
 d76:	83 70       	andi	r24, 0x03	; 3
 d78:	81 70       	andi	r24, 0x01	; 1
 d7a:	fb 01       	movw	r30, r22
 d7c:	80 83       	st	Z, r24
    return E_OK;
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	08 95       	ret
      }
    default :
    return E_NOK;
 d82:	81 e0       	ldi	r24, 0x01	; 1
  }
}
 d84:	08 95       	ret

00000d86 <Timer_GetValue>:
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
 d86:	fb 01       	movw	r30, r22
	uint8_t Ret=0;
	switch (Timer_CH_NO) {
 d88:	81 30       	cpi	r24, 0x01	; 1
 d8a:	51 f0       	breq	.+20     	; 0xda0 <Timer_GetValue+0x1a>
 d8c:	81 30       	cpi	r24, 0x01	; 1
 d8e:	18 f0       	brcs	.+6      	; 0xd96 <Timer_GetValue+0x10>
 d90:	82 30       	cpi	r24, 0x02	; 2
 d92:	89 f4       	brne	.+34     	; 0xdb6 <Timer_GetValue+0x30>
 d94:	0b c0       	rjmp	.+22     	; 0xdac <Timer_GetValue+0x26>
		case TIMER_CH0:
		{
			*Data =TCNT0;
 d96:	82 b7       	in	r24, 0x32	; 50
 d98:	80 83       	st	Z, r24
 d9a:	11 82       	std	Z+1, r1	; 0x01
			Ret= E_OK;
 d9c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 d9e:	08 95       	ret
		}
		case TIMER_CH1:
		{
			*Data =TCNT1;
 da0:	8c b5       	in	r24, 0x2c	; 44
 da2:	9d b5       	in	r25, 0x2d	; 45
 da4:	91 83       	std	Z+1, r25	; 0x01
 da6:	80 83       	st	Z, r24
			Ret= E_OK;
 da8:	80 e0       	ldi	r24, 0x00	; 0
			break;
 daa:	08 95       	ret
		}
		case TIMER_CH2:
		{
			*Data =TCNT2;
 dac:	84 b5       	in	r24, 0x24	; 36
 dae:	80 83       	st	Z, r24
 db0:	11 82       	std	Z+1, r1	; 0x01
			Ret = E_OK;
 db2:	80 e0       	ldi	r24, 0x00	; 0
			break;
 db4:	08 95       	ret
		}
		default :
		Ret= E_NOK;
 db6:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
return Ret;

}
 db8:	08 95       	ret

00000dba <TMU_Init>:
uint8_t u8_FUN_index=0;
Buffer_Request Buffer_Array[Buffer_Size];
volatile uint8_t u8Excution_to_be_done=0;

ERROR_STATUS TMU_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
 dba:	0f 93       	push	r16
 dbc:	1f 93       	push	r17
 dbe:	cf 93       	push	r28
 dc0:	df 93       	push	r29
 dc2:	ec 01       	movw	r28, r24
 dc4:	19 81       	ldd	r17, Y+1	; 0x01
uint8_t ret=E_OK;
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;
 dc6:	80 91 7f 00 	lds	r24, 0x007F
 dca:	8f 5f       	subi	r24, 0xFF	; 255
 dcc:	80 93 7f 00 	sts	0x007F, r24
switch(u8_channel_ID)
 dd0:	11 23       	and	r17, r17
 dd2:	19 f0       	breq	.+6      	; 0xdda <TMU_Init+0x20>
 dd4:	12 30       	cpi	r17, 0x02	; 2
 dd6:	89 f4       	brne	.+34     	; 0xdfa <TMU_Init+0x40>
 dd8:	08 c0       	rjmp	.+16     	; 0xdea <TMU_Init+0x30>
{
	case TIMER_CH0:
			G_interrupt_Enable();
 dda:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
			Timer_Init(&Timer_Configuration0);
 dde:	8e e6       	ldi	r24, 0x6E	; 110
 de0:	90 e0       	ldi	r25, 0x00	; 0
 de2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Timer_Init>
Buffer_Request Buffer_Array[Buffer_Size];
volatile uint8_t u8Excution_to_be_done=0;

ERROR_STATUS TMU_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
uint8_t ret=E_OK;
 de6:	00 e0       	ldi	r16, 0x00	; 0
switch(u8_channel_ID)
{
	case TIMER_CH0:
			G_interrupt_Enable();
			Timer_Init(&Timer_Configuration0);
				break;
 de8:	09 c0       	rjmp	.+18     	; 0xdfc <TMU_Init+0x42>
	case TIMER_CH2:
		G_interrupt_Enable();
 dea:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
		ret=Timer_Init(&Timer_Configuration2);
 dee:	84 e7       	ldi	r24, 0x74	; 116
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Timer_Init>
 df6:	08 2f       	mov	r16, r24
			break;
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <TMU_Init+0x42>
	default:
			ret=E_NOK;
 dfa:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************/
/*Intializ the required timer identified by the user using required prescaler  */
/************************************************************************/

switch(ConfigPtr->u8_resolution)
 dfc:	88 81       	ld	r24, Y
 dfe:	81 30       	cpi	r24, 0x01	; 1
 e00:	89 f4       	brne	.+34     	; 0xe24 <TMU_Init+0x6a>
{
	case TIMER_RESOLUTION_1_MS:
	{
		switch(u8_channel_ID)
 e02:	11 23       	and	r17, r17
 e04:	19 f0       	breq	.+6      	; 0xe0c <TMU_Init+0x52>
 e06:	12 30       	cpi	r17, 0x02	; 2
 e08:	79 f4       	brne	.+30     	; 0xe28 <TMU_Init+0x6e>
 e0a:	06 c0       	rjmp	.+12     	; 0xe18 <TMU_Init+0x5e>
		{
			case TIMER_CH0 :
				Timer_Start(TIMER_CH0,NUM_OF_TICKS_FOR_1_MS);
 e0c:	80 e0       	ldi	r24, 0x00	; 0
 e0e:	6e e0       	ldi	r22, 0x0E	; 14
 e10:	70 e0       	ldi	r23, 0x00	; 0
 e12:	0e 94 6f 05 	call	0xade	; 0xade <Timer_Start>
					break;
 e16:	09 c0       	rjmp	.+18     	; 0xe2a <TMU_Init+0x70>
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,NUM_OF_TICKS_FOR_1_MS);
 e18:	82 e0       	ldi	r24, 0x02	; 2
 e1a:	6e e0       	ldi	r22, 0x0E	; 14
 e1c:	70 e0       	ldi	r23, 0x00	; 0
 e1e:	0e 94 6f 05 	call	0xade	; 0xade <Timer_Start>
					break;
 e22:	03 c0       	rjmp	.+6      	; 0xe2a <TMU_Init+0x70>
	}	
	
	
	
	default:
	ret=E_NOK;
 e24:	01 e0       	ldi	r16, 0x01	; 1
 e26:	01 c0       	rjmp	.+2      	; 0xe2a <TMU_Init+0x70>
					break;
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,NUM_OF_TICKS_FOR_1_MS);
					break;
			default:
				ret=E_NOK;
 e28:	01 e0       	ldi	r16, 0x01	; 1

/****************************************************************************/
/*      Deal with Errors  to be returned									*/
/***************************************************************************/
return ret;
}
 e2a:	80 2f       	mov	r24, r16
 e2c:	df 91       	pop	r29
 e2e:	cf 91       	pop	r28
 e30:	1f 91       	pop	r17
 e32:	0f 91       	pop	r16
 e34:	08 95       	ret

00000e36 <TMU_DeInit>:
/************************************************************************************************/
	
	
	
return ret;	
}
 e36:	80 e0       	ldi	r24, 0x00	; 0
 e38:	08 95       	ret

00000e3a <TMU_Start_Timer>:

	and provide the request to request buffer (ptr_to_func,delay) Dispatcher with the call back function needed(consumer)

	and make sure this function must not be excuted unless Init happened and De_init not happened
	*/
	if(u8_Is_Intialized == 1)
 e3a:	30 91 7f 00 	lds	r19, 0x007F
 e3e:	31 30       	cpi	r19, 0x01	; 1
 e40:	89 f4       	brne	.+34     	; 0xe64 <TMU_Start_Timer+0x2a>
	{
		
		(Buffer_Array[u8_function_index]).Fuction_consumer=Function_Consumer;
 e42:	50 e0       	ldi	r21, 0x00	; 0
 e44:	fa 01       	movw	r30, r20
 e46:	ee 0f       	add	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	ee 0f       	add	r30, r30
 e4c:	ff 1f       	adc	r31, r31
 e4e:	e4 0f       	add	r30, r20
 e50:	f5 1f       	adc	r31, r21
 e52:	ea 55       	subi	r30, 0x5A	; 90
 e54:	ff 4f       	sbci	r31, 0xFF	; 255
 e56:	91 83       	std	Z+1, r25	; 0x01
 e58:	80 83       	st	Z, r24
		(Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
 e5a:	64 83       	std	Z+4, r22	; 0x04
		(Buffer_Array[u8_function_index]).u8_time_delay=u8_Time_delay;
 e5c:	23 83       	std	Z+3, r18	; 0x03
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
 e5e:	12 82       	std	Z+2, r1	; 0x02
	
return ret;	
}

ERROR_STATUS TMU_Start_Timer(ptr_to_Fun Function_Consumer,uint8_t  u8_Preodicity,uint8_t u8_function_index,uint8_t u8_Time_delay)
{uint8_t ret=E_OK;
 e60:	80 e0       	ldi	r24, 0x00	; 0
 e62:	08 95       	ret
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
		
		
	}
	else{
		ret=E_NOK;
 e64:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ret;
}
 e66:	08 95       	ret

00000e68 <TMU_Main_Function>:

ERROR_STATUS TMU_Main_Function(void)
{	uint8_t ret=E_OK;
 e68:	cf 93       	push	r28
	uint8_t status_flag=0;
	uint8_t preodic_status_flag=0;
	uint8_t u8_Time_needed=0;
	ptr_to_Fun Excuted=((Buffer_Array[u8_FUN_index]).Fuction_consumer);
 e6a:	80 91 7e 00 	lds	r24, 0x007E
 e6e:	90 e0       	ldi	r25, 0x00	; 0
 e70:	fc 01       	movw	r30, r24
 e72:	ee 0f       	add	r30, r30
 e74:	ff 1f       	adc	r31, r31
 e76:	ee 0f       	add	r30, r30
 e78:	ff 1f       	adc	r31, r31
 e7a:	e8 0f       	add	r30, r24
 e7c:	f9 1f       	adc	r31, r25
 e7e:	ea 55       	subi	r30, 0x5A	; 90
 e80:	ff 4f       	sbci	r31, 0xFF	; 255
 e82:	80 81       	ld	r24, Z
 e84:	91 81       	ldd	r25, Z+1	; 0x01
	
	u8_Time_needed =(Buffer_Array[u8_FUN_index]).u8_time_delay;
 e86:	33 81       	ldd	r19, Z+3	; 0x03
	status_flag =(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped;
	preodic_status_flag=(Buffer_Array[u8_FUN_index]).preodic;
 e88:	c4 81       	ldd	r28, Z+4	; 0x04
if(status_flag==1){ret=E_OK;}
 e8a:	22 81       	ldd	r18, Z+2	; 0x02
 e8c:	21 30       	cpi	r18, 0x01	; 1
 e8e:	69 f0       	breq	.+26     	; 0xeaa <TMU_Main_Function+0x42>
else{
/*	u16Excution_to_be_done=100;  ISR*/
	if(u8Excution_to_be_done == u8_Time_needed)
 e90:	20 91 7d 00 	lds	r18, 0x007D
 e94:	23 17       	cp	r18, r19
 e96:	11 f4       	brne	.+4      	; 0xe9c <TMU_Main_Function+0x34>
	{
		Excuted();
 e98:	fc 01       	movw	r30, r24
 e9a:	09 95       	icall
	}
	if(preodic_status_flag==0){
 e9c:	cc 23       	and	r28, r28
 e9e:	29 f4       	brne	.+10     	; 0xeaa <TMU_Main_Function+0x42>
		u8_FUN_index++;
 ea0:	80 91 7e 00 	lds	r24, 0x007E
 ea4:	8f 5f       	subi	r24, 0xFF	; 255
 ea6:	80 93 7e 00 	sts	0x007E, r24
	}
}
return ret;


}
 eaa:	80 e0       	ldi	r24, 0x00	; 0
 eac:	cf 91       	pop	r28
 eae:	08 95       	ret

00000eb0 <TMU_Stop_Timer>:


ERROR_STATUS TMU_Stop_Timer(uint8_t u8_function_index)
{
	(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
 eb0:	90 e0       	ldi	r25, 0x00	; 0
 eb2:	fc 01       	movw	r30, r24
 eb4:	ee 0f       	add	r30, r30
 eb6:	ff 1f       	adc	r31, r31
 eb8:	ee 0f       	add	r30, r30
 eba:	ff 1f       	adc	r31, r31
 ebc:	8e 0f       	add	r24, r30
 ebe:	9f 1f       	adc	r25, r31
 ec0:	fc 01       	movw	r30, r24
 ec2:	ea 55       	subi	r30, 0x5A	; 90
 ec4:	ff 4f       	sbci	r31, 0xFF	; 255
 ec6:	81 e0       	ldi	r24, 0x01	; 1
 ec8:	82 83       	std	Z+2, r24	; 0x02
}
 eca:	08 95       	ret

00000ecc <Tmu_Fun>:

void Tmu_Fun(void){DIO_Toggle(GPIOC,BIT4);}
 ecc:	82 e0       	ldi	r24, 0x02	; 2
 ece:	60 e1       	ldi	r22, 0x10	; 16
 ed0:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Toggle>
 ed4:	08 95       	ret

00000ed6 <Tmu_For>:
void Tmu_For(void){DIO_Toggle(GPIOB,BIT4);}
 ed6:	81 e0       	ldi	r24, 0x01	; 1
 ed8:	60 e1       	ldi	r22, 0x10	; 16
 eda:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Toggle>
 ede:	08 95       	ret

00000ee0 <Tmu_excute>:
void Tmu_excute(void){PORTA_DATA ^=0xff;}
 ee0:	8b b3       	in	r24, 0x1b	; 27
 ee2:	80 95       	com	r24
 ee4:	8b bb       	out	0x1b, r24	; 27
 ee6:	08 95       	ret

00000ee8 <timer_interrupt>:


void timer_interrupt(void){
	u8Excution_to_be_done++;
 ee8:	80 91 7d 00 	lds	r24, 0x007D
 eec:	8f 5f       	subi	r24, 0xFF	; 255
 eee:	80 93 7d 00 	sts	0x007D, r24
	UDR+=1;
 ef2:	8c b1       	in	r24, 0x0c	; 12
 ef4:	8f 5f       	subi	r24, 0xFF	; 255
 ef6:	8c b9       	out	0x0c, r24	; 12
	Timer_Start(TIMER_CH0,14);
 ef8:	80 e0       	ldi	r24, 0x00	; 0
 efa:	6e e0       	ldi	r22, 0x0E	; 14
 efc:	70 e0       	ldi	r23, 0x00	; 0
 efe:	0e 94 6f 05 	call	0xade	; 0xade <Timer_Start>
 f02:	08 95       	ret

00000f04 <_exit>:
 f04:	f8 94       	cli

00000f06 <__stop_program>:
 f06:	ff cf       	rjmp	.-2      	; 0xf06 <__stop_program>

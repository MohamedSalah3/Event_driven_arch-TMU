
TMU_EventDrivenArch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000fae  00001042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800082  00800082  00001064  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000017b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015db  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00002e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071e  00000000  00000000  000034bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f8  00000000  00000000  00003bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000748  00000000  00000000  000044d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017d8  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_1>
   8:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_2>
   c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_3>
  10:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_4>
  14:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_5>
  18:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_6>
  1c:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_7>
  20:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_8>
  24:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_9>
  28:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_10>
  2c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_11>
  30:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_12>
  34:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_13>
  38:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_14>
  3c:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_15>
  40:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_16>
  44:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_17>
  48:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_18>
  4c:	0c 94 14 04 	jmp	0x828	; 0x828 <__vector_19>
  50:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_20>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 04 	call	0x8c4	; 0x8c4 <main>
  8a:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	
  92:	fc 01       	movw	r30, r24
	uint8_t RET=0;
	if (DIO_info== NULL)
  94:	00 97       	sbiw	r24, 0x00	; 0
  96:	09 f4       	brne	.+2      	; 0x9a <DIO_init+0x8>
  98:	50 c0       	rjmp	.+160    	; 0x13a <DIO_init+0xa8>
	{
		RET=NULL_PTR+DIO_MODULE;
		
	}else{
		switch(DIO_info->dir)
  9a:	82 81       	ldd	r24, Z+2	; 0x02
  9c:	88 23       	and	r24, r24
  9e:	21 f0       	breq	.+8      	; 0xa8 <DIO_init+0x16>
  a0:	8f 3f       	cpi	r24, 0xFF	; 255
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_init+0x14>
  a4:	4c c0       	rjmp	.+152    	; 0x13e <DIO_init+0xac>
  a6:	27 c0       	rjmp	.+78     	; 0xf6 <DIO_init+0x64>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
  a8:	80 81       	ld	r24, Z
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	79 f0       	breq	.+30     	; 0xcc <DIO_init+0x3a>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	30 f0       	brcs	.+12     	; 0xbe <DIO_init+0x2c>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	91 f0       	breq	.+36     	; 0xda <DIO_init+0x48>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_init+0x2a>
  ba:	43 c0       	rjmp	.+134    	; 0x142 <DIO_init+0xb0>
  bc:	15 c0       	rjmp	.+42     	; 0xe8 <DIO_init+0x56>
		 		{
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
  be:	9a b3       	in	r25, 0x1a	; 26
  c0:	81 81       	ldd	r24, Z+1	; 0x01
  c2:	80 95       	com	r24
  c4:	89 23       	and	r24, r25
  c6:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  c8:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
					break;
  ca:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
  cc:	97 b3       	in	r25, 0x17	; 23
  ce:	81 81       	ldd	r24, Z+1	; 0x01
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  d6:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
  d8:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
  da:	94 b3       	in	r25, 0x14	; 20
  dc:	81 81       	ldd	r24, Z+1	; 0x01
  de:	80 95       	com	r24
  e0:	89 23       	and	r24, r25
  e2:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  e4:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
  e6:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
  e8:	91 b3       	in	r25, 0x11	; 17
  ea:	81 81       	ldd	r24, Z+1	; 0x01
  ec:	80 95       	com	r24
  ee:	89 23       	and	r24, r25
  f0:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
  f2:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
  f4:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
  f6:	80 81       	ld	r24, Z
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	69 f0       	breq	.+26     	; 0x116 <DIO_init+0x84>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_init+0x78>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	79 f0       	breq	.+30     	; 0x122 <DIO_init+0x90>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	f9 f4       	brne	.+62     	; 0x146 <DIO_init+0xb4>
 108:	12 c0       	rjmp	.+36     	; 0x12e <DIO_init+0x9c>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
 10a:	9a b3       	in	r25, 0x1a	; 26
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	89 2b       	or	r24, r25
 110:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 112:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
 114:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
 116:	97 b3       	in	r25, 0x17	; 23
 118:	81 81       	ldd	r24, Z+1	; 0x01
 11a:	89 2b       	or	r24, r25
 11c:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 11e:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
 120:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
 122:	94 b3       	in	r25, 0x14	; 20
 124:	81 81       	ldd	r24, Z+1	; 0x01
 126:	89 2b       	or	r24, r25
 128:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 12a:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
 12c:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
 12e:	91 b3       	in	r25, 0x11	; 17
 130:	81 81       	ldd	r24, Z+1	; 0x01
 132:	89 2b       	or	r24, r25
 134:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 136:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
 138:	08 95       	ret
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	
	uint8_t RET=0;
	if (DIO_info== NULL)
	{
		RET=NULL_PTR+DIO_MODULE;
 13a:	86 e1       	ldi	r24, 0x16	; 22
 13c:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0
			RET=E_NOK;
	}
	
}	
return RET;
}
 148:	08 95       	ret

0000014a <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
 14a:	44 23       	and	r20, r20
 14c:	21 f0       	breq	.+8      	; 0x156 <DIO_Write+0xc>
 14e:	4f 3f       	cpi	r20, 0xFF	; 255
 150:	09 f0       	breq	.+2      	; 0x154 <DIO_Write+0xa>
 152:	3f c0       	rjmp	.+126    	; 0x1d2 <DIO_Write+0x88>
 154:	21 c0       	rjmp	.+66     	; 0x198 <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	69 f0       	breq	.+26     	; 0x174 <DIO_Write+0x2a>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_Write+0x1e>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	79 f0       	breq	.+30     	; 0x180 <DIO_Write+0x36>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	c1 f5       	brne	.+112    	; 0x1d6 <DIO_Write+0x8c>
 166:	12 c0       	rjmp	.+36     	; 0x18c <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
 168:	8b b3       	in	r24, 0x1b	; 27
 16a:	60 95       	com	r22
 16c:	68 23       	and	r22, r24
 16e:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 170:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
 172:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
 174:	88 b3       	in	r24, 0x18	; 24
 176:	60 95       	com	r22
 178:	68 23       	and	r22, r24
 17a:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
 17e:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
 180:	85 b3       	in	r24, 0x15	; 21
 182:	60 95       	com	r22
 184:	68 23       	and	r22, r24
 186:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 188:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
 18a:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	60 95       	com	r22
 190:	68 23       	and	r22, r24
 192:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 194:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
 196:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	61 f0       	breq	.+24     	; 0x1b4 <DIO_Write+0x6a>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	28 f0       	brcs	.+10     	; 0x1aa <DIO_Write+0x60>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	69 f0       	breq	.+26     	; 0x1be <DIO_Write+0x74>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	c9 f4       	brne	.+50     	; 0x1da <DIO_Write+0x90>
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	68 2b       	or	r22, r24
 1ae:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
 1b2:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
 1b4:	88 b3       	in	r24, 0x18	; 24
 1b6:	68 2b       	or	r22, r24
 1b8:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
 1bc:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	68 2b       	or	r22, r24
 1c2:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
 1c6:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
 1c8:	82 b3       	in	r24, 0x12	; 18
 1ca:	68 2b       	or	r22, r24
 1cc:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
 1d0:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1da:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
 1dc:	08 95       	ret

000001de <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
 1de:	fa 01       	movw	r30, r20

switch (GPIO)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	59 f0       	breq	.+22     	; 0x1fa <DIO_Read+0x1c>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_Read+0x14>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	59 f0       	breq	.+22     	; 0x202 <DIO_Read+0x24>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	81 f4       	brne	.+32     	; 0x210 <DIO_Read+0x32>
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
 1f2:	89 b3       	in	r24, 0x19	; 25
 1f4:	68 23       	and	r22, r24
 1f6:	60 83       	st	Z, r22
	break;
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
 1fa:	86 b3       	in	r24, 0x16	; 22
 1fc:	68 23       	and	r22, r24
 1fe:	60 83       	st	Z, r22
	break;
 200:	07 c0       	rjmp	.+14     	; 0x210 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
 202:	83 b3       	in	r24, 0x13	; 19
 204:	68 23       	and	r22, r24
 206:	60 83       	st	Z, r22
	break;
 208:	03 c0       	rjmp	.+6      	; 0x210 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
 20a:	80 b3       	in	r24, 0x10	; 16
 20c:	68 23       	and	r22, r24
 20e:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	11 f0       	breq	.+4      	; 0x21a <DIO_Read+0x3c>
{
	*data = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
}


}
 21a:	08 95       	ret

0000021c <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	61 f0       	breq	.+24     	; 0x238 <DIO_Toggle+0x1c>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	28 f0       	brcs	.+10     	; 0x22e <DIO_Toggle+0x12>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	69 f0       	breq	.+26     	; 0x242 <DIO_Toggle+0x26>
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	a9 f4       	brne	.+42     	; 0x256 <DIO_Toggle+0x3a>
 22c:	0f c0       	rjmp	.+30     	; 0x24c <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	68 27       	eor	r22, r24
 232:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
 234:	80 e0       	ldi	r24, 0x00	; 0
		break;
 236:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	68 27       	eor	r22, r24
 23c:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
 240:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
 242:	85 b3       	in	r24, 0x15	; 21
 244:	68 27       	eor	r22, r24
 246:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
 248:	80 e0       	ldi	r24, 0x00	; 0
		break;
 24a:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	68 27       	eor	r22, r24
 250:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
		break;
 254:	08 95       	ret
		default:
		ret=E_NOK;
 256:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
 258:	08 95       	ret

0000025a <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
 25a:	8f b7       	in	r24, 0x3f	; 63
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	8f bf       	out	0x3f, r24	; 63
}
 260:	08 95       	ret

00000262 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
 262:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
 264:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
 266:	8b b7       	in	r24, 0x3b	; 59
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
 26c:	84 b7       	in	r24, 0x34	; 52
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	84 bf       	out	0x34, r24	; 52
}
 272:	08 95       	ret

00000274 <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
 274:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
 276:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
 278:	8b b7       	in	r24, 0x3b	; 59
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
 27e:	85 b7       	in	r24, 0x35	; 53
 280:	84 60       	ori	r24, 0x04	; 4
 282:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
 284:	85 b7       	in	r24, 0x35	; 53
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	85 bf       	out	0x35, r24	; 53
	
}
 28a:	08 95       	ret

0000028c <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
 28c:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
 28e:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
 290:	8b b7       	in	r24, 0x3b	; 59
 292:	80 64       	ori	r24, 0x40	; 64
 294:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
 296:	85 b7       	in	r24, 0x35	; 53
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
 29c:	85 b7       	in	r24, 0x35	; 53
 29e:	8d 7f       	andi	r24, 0xFD	; 253
 2a0:	85 bf       	out	0x35, r24	; 53
	
}
 2a2:	08 95       	ret

000002a4 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
 2a4:	8f b7       	in	r24, 0x3f	; 63
 2a6:	8f 77       	andi	r24, 0x7F	; 127
 2a8:	8f bf       	out	0x3f, r24	; 63
}
 2aa:	08 95       	ret

000002ac <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
  INT0_external_interrupt();
 2ce:	e0 91 9c 00 	lds	r30, 0x009C
 2d2:	f0 91 9d 00 	lds	r31, 0x009D
 2d6:	09 95       	icall
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
  INT1_external_interrupt();
 31c:	e0 91 a4 00 	lds	r30, 0x00A4
 320:	f0 91 a5 00 	lds	r31, 0x00A5
 324:	09 95       	icall
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
  INT2_external_interrupt();
 36a:	e0 91 94 00 	lds	r30, 0x0094
 36e:	f0 91 95 00 	lds	r31, 0x0095
 372:	09 95       	icall
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
TIMER2COMP();
 3b8:	e0 91 aa 00 	lds	r30, 0x00AA
 3bc:	f0 91 ab 00 	lds	r31, 0x00AB
 3c0:	09 95       	icall
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
  TIMER2OVF();
 406:	e0 91 8a 00 	lds	r30, 0x008A
 40a:	f0 91 8b 00 	lds	r31, 0x008B
 40e:	09 95       	icall
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
 432:	1f 92       	push	r1
 434:	0f 92       	push	r0
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	0f 92       	push	r0
 43a:	11 24       	eor	r1, r1
 43c:	2f 93       	push	r18
 43e:	3f 93       	push	r19
 440:	4f 93       	push	r20
 442:	5f 93       	push	r21
 444:	6f 93       	push	r22
 446:	7f 93       	push	r23
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	af 93       	push	r26
 44e:	bf 93       	push	r27
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
  TIMER1CAPT();
 454:	e0 91 a6 00 	lds	r30, 0x00A6
 458:	f0 91 a7 00 	lds	r31, 0x00A7
 45c:	09 95       	icall
}
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
TIMER1COMPA();
 4a2:	e0 91 90 00 	lds	r30, 0x0090
 4a6:	f0 91 91 00 	lds	r31, 0x0091
 4aa:	09 95       	icall
}
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
  TIMER1COMPB();
 4f0:	e0 91 8e 00 	lds	r30, 0x008E
 4f4:	f0 91 8f 00 	lds	r31, 0x008F
 4f8:	09 95       	icall
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	2f 93       	push	r18
 528:	3f 93       	push	r19
 52a:	4f 93       	push	r20
 52c:	5f 93       	push	r21
 52e:	6f 93       	push	r22
 530:	7f 93       	push	r23
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
 536:	af 93       	push	r26
 538:	bf 93       	push	r27
 53a:	ef 93       	push	r30
 53c:	ff 93       	push	r31
  TIMER1OVF();
 53e:	e0 91 a8 00 	lds	r30, 0x00A8
 542:	f0 91 a9 00 	lds	r31, 0x00A9
 546:	09 95       	icall
}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31

  TIMER0COMP();
 58c:	e0 91 a0 00 	lds	r30, 0x00A0
 590:	f0 91 a1 00 	lds	r31, 0x00A1
 594:	09 95       	icall
}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	2f 93       	push	r18
 5c4:	3f 93       	push	r19
 5c6:	4f 93       	push	r20
 5c8:	5f 93       	push	r21
 5ca:	6f 93       	push	r22
 5cc:	7f 93       	push	r23
 5ce:	8f 93       	push	r24
 5d0:	9f 93       	push	r25
 5d2:	af 93       	push	r26
 5d4:	bf 93       	push	r27
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31

  TIMER0OVF_INT();
 5da:	e0 91 6c 00 	lds	r30, 0x006C
 5de:	f0 91 6d 00 	lds	r31, 0x006D
 5e2:	09 95       	icall
}
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	0f 90       	pop	r0
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	0f 90       	pop	r0
 602:	1f 90       	pop	r1
 604:	18 95       	reti

00000606 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	2f 93       	push	r18
 612:	3f 93       	push	r19
 614:	4f 93       	push	r20
 616:	5f 93       	push	r21
 618:	6f 93       	push	r22
 61a:	7f 93       	push	r23
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
  SPI_STC();
 628:	e0 91 92 00 	lds	r30, 0x0092
 62c:	f0 91 93 00 	lds	r31, 0x0093
 630:	09 95       	icall
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	4f 93       	push	r20
 664:	5f 93       	push	r21
 666:	6f 93       	push	r22
 668:	7f 93       	push	r23
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	af 93       	push	r26
 670:	bf 93       	push	r27
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31
  USART_RXC();
 676:	e0 91 88 00 	lds	r30, 0x0088
 67a:	f0 91 89 00 	lds	r31, 0x0089
 67e:	09 95       	icall
}
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
  USART_UDRE();
 6c4:	e0 91 a2 00 	lds	r30, 0x00A2
 6c8:	f0 91 a3 00 	lds	r31, 0x00A3
 6cc:	09 95       	icall
}
 6ce:	ff 91       	pop	r31
 6d0:	ef 91       	pop	r30
 6d2:	bf 91       	pop	r27
 6d4:	af 91       	pop	r26
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	7f 91       	pop	r23
 6dc:	6f 91       	pop	r22
 6de:	5f 91       	pop	r21
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
  USART_TXC();
 712:	e0 91 9e 00 	lds	r30, 0x009E
 716:	f0 91 9f 00 	lds	r31, 0x009F
 71a:	09 95       	icall
}
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
  ADC_INT();
 760:	e0 91 98 00 	lds	r30, 0x0098
 764:	f0 91 99 00 	lds	r31, 0x0099
 768:	09 95       	icall
}
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	2f 93       	push	r18
 798:	3f 93       	push	r19
 79a:	4f 93       	push	r20
 79c:	5f 93       	push	r21
 79e:	6f 93       	push	r22
 7a0:	7f 93       	push	r23
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
 7a6:	af 93       	push	r26
 7a8:	bf 93       	push	r27
 7aa:	ef 93       	push	r30
 7ac:	ff 93       	push	r31
  EE_RDY();
 7ae:	e0 91 9a 00 	lds	r30, 0x009A
 7b2:	f0 91 9b 00 	lds	r31, 0x009B
 7b6:	09 95       	icall
}
 7b8:	ff 91       	pop	r31
 7ba:	ef 91       	pop	r30
 7bc:	bf 91       	pop	r27
 7be:	af 91       	pop	r26
 7c0:	9f 91       	pop	r25
 7c2:	8f 91       	pop	r24
 7c4:	7f 91       	pop	r23
 7c6:	6f 91       	pop	r22
 7c8:	5f 91       	pop	r21
 7ca:	4f 91       	pop	r20
 7cc:	3f 91       	pop	r19
 7ce:	2f 91       	pop	r18
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
 7da:	1f 92       	push	r1
 7dc:	0f 92       	push	r0
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	0f 92       	push	r0
 7e2:	11 24       	eor	r1, r1
 7e4:	2f 93       	push	r18
 7e6:	3f 93       	push	r19
 7e8:	4f 93       	push	r20
 7ea:	5f 93       	push	r21
 7ec:	6f 93       	push	r22
 7ee:	7f 93       	push	r23
 7f0:	8f 93       	push	r24
 7f2:	9f 93       	push	r25
 7f4:	af 93       	push	r26
 7f6:	bf 93       	push	r27
 7f8:	ef 93       	push	r30
 7fa:	ff 93       	push	r31
  ANA_COMP();
 7fc:	e0 91 96 00 	lds	r30, 0x0096
 800:	f0 91 97 00 	lds	r31, 0x0097
 804:	09 95       	icall
}
 806:	ff 91       	pop	r31
 808:	ef 91       	pop	r30
 80a:	bf 91       	pop	r27
 80c:	af 91       	pop	r26
 80e:	9f 91       	pop	r25
 810:	8f 91       	pop	r24
 812:	7f 91       	pop	r23
 814:	6f 91       	pop	r22
 816:	5f 91       	pop	r21
 818:	4f 91       	pop	r20
 81a:	3f 91       	pop	r19
 81c:	2f 91       	pop	r18
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	0f 90       	pop	r0
 824:	1f 90       	pop	r1
 826:	18 95       	reti

00000828 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
 828:	1f 92       	push	r1
 82a:	0f 92       	push	r0
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	0f 92       	push	r0
 830:	11 24       	eor	r1, r1
 832:	2f 93       	push	r18
 834:	3f 93       	push	r19
 836:	4f 93       	push	r20
 838:	5f 93       	push	r21
 83a:	6f 93       	push	r22
 83c:	7f 93       	push	r23
 83e:	8f 93       	push	r24
 840:	9f 93       	push	r25
 842:	af 93       	push	r26
 844:	bf 93       	push	r27
 846:	ef 93       	push	r30
 848:	ff 93       	push	r31
  TWI_I2C();
 84a:	e0 91 86 00 	lds	r30, 0x0086
 84e:	f0 91 87 00 	lds	r31, 0x0087
 852:	09 95       	icall
}
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	2f 93       	push	r18
 882:	3f 93       	push	r19
 884:	4f 93       	push	r20
 886:	5f 93       	push	r21
 888:	6f 93       	push	r22
 88a:	7f 93       	push	r23
 88c:	8f 93       	push	r24
 88e:	9f 93       	push	r25
 890:	af 93       	push	r26
 892:	bf 93       	push	r27
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
  SPM_RDY();
 898:	e0 91 8c 00 	lds	r30, 0x008C
 89c:	f0 91 8d 00 	lds	r31, 0x008D
 8a0:	09 95       	icall
}
 8a2:	ff 91       	pop	r31
 8a4:	ef 91       	pop	r30
 8a6:	bf 91       	pop	r27
 8a8:	af 91       	pop	r26
 8aa:	9f 91       	pop	r25
 8ac:	8f 91       	pop	r24
 8ae:	7f 91       	pop	r23
 8b0:	6f 91       	pop	r22
 8b2:	5f 91       	pop	r21
 8b4:	4f 91       	pop	r20
 8b6:	3f 91       	pop	r19
 8b8:	2f 91       	pop	r18
 8ba:	0f 90       	pop	r0
 8bc:	0f be       	out	0x3f, r0	; 63
 8be:	0f 90       	pop	r0
 8c0:	1f 90       	pop	r1
 8c2:	18 95       	reti

000008c4 <main>:

#include "Timer.h"
#include "TMU.h"
int main(void)
{	
	DIO_init(&Dio_configurationB);
 8c4:	86 e6       	ldi	r24, 0x66	; 102
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
	DIO_init(&Dio_configurationC);
 8cc:	83 e6       	ldi	r24, 0x63	; 99
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
	TMU_Init(&TMU_Configuration);
 8d4:	80 e8       	ldi	r24, 0x80	; 128
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TMU_Init>
	TMU_Start_Timer(Tmu_excute,1,0,2);
 8dc:	87 ec       	ldi	r24, 0xC7	; 199
 8de:	97 e0       	ldi	r25, 0x07	; 7
 8e0:	61 e0       	ldi	r22, 0x01	; 1
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	22 e0       	ldi	r18, 0x02	; 2
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	0e 94 34 07 	call	0xe68	; 0xe68 <TMU_Start_Timer>
	TMU_Start_Timer(Tmu_Fun,1,1,1);
 8ec:	8d eb       	ldi	r24, 0xBD	; 189
 8ee:	97 e0       	ldi	r25, 0x07	; 7
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	41 e0       	ldi	r20, 0x01	; 1
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	0e 94 34 07 	call	0xe68	; 0xe68 <TMU_Start_Timer>
	
	while(1)
    {
		TMU_Main_Function();
 8fc:	0e 94 50 07 	call	0xea0	; 0xea0 <TMU_Main_Function>
 900:	fd cf       	rjmp	.-6      	; 0x8fc <main+0x38>

00000902 <Timer_Init>:
 *
 */
 static uint8_t prescaler_value=0;
 
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
 902:	1f 93       	push	r17
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	ec 01       	movw	r28, r24
prescaler_value=Timer_cfg->Timer_Prescaler;
 90a:	8b 81       	ldd	r24, Y+3	; 0x03
 90c:	80 93 82 00 	sts	0x0082, r24
if (Timer_cfg==NULL)
 910:	20 97       	sbiw	r28, 0x00	; 0
 912:	11 f0       	breq	.+4      	; 0x918 <Timer_Init+0x16>
 *
 */
 static uint8_t prescaler_value=0;
 
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
 914:	10 e0       	ldi	r17, 0x00	; 0
 916:	01 c0       	rjmp	.+2      	; 0x91a <Timer_Init+0x18>
prescaler_value=Timer_cfg->Timer_Prescaler;
if (Timer_cfg==NULL)
{
	Ret=TIMER_MODULE+NULL_PTR;
 918:	10 e2       	ldi	r17, 0x20	; 32
}
switch (Timer_cfg->Timer_CH_NO) {
 91a:	88 81       	ld	r24, Y
 91c:	81 30       	cpi	r24, 0x01	; 1
 91e:	09 f4       	brne	.+2      	; 0x922 <Timer_Init+0x20>
 920:	4c c0       	rjmp	.+152    	; 0x9ba <Timer_Init+0xb8>
 922:	81 30       	cpi	r24, 0x01	; 1
 924:	20 f0       	brcs	.+8      	; 0x92e <Timer_Init+0x2c>
 926:	82 30       	cpi	r24, 0x02	; 2
 928:	09 f0       	breq	.+2      	; 0x92c <Timer_Init+0x2a>
 92a:	d8 c0       	rjmp	.+432    	; 0xadc <Timer_Init+0x1da>
 92c:	93 c0       	rjmp	.+294    	; 0xa54 <Timer_Init+0x152>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
    case TIMER_CH0:
        {
  TCCR0 |=T0_NORMAL_MODE;
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	83 bf       	out	0x33, r24	; 51
  
          switch (Timer_cfg->Timer_Mode) {
 932:	89 81       	ldd	r24, Y+1	; 0x01
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	b9 f0       	breq	.+46     	; 0x966 <Timer_Init+0x64>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	18 f0       	brcs	.+6      	; 0x942 <Timer_Init+0x40>
 93c:	82 30       	cpi	r24, 0x02	; 2
 93e:	e1 f5       	brne	.+120    	; 0x9b8 <Timer_Init+0xb6>
 940:	26 c0       	rjmp	.+76     	; 0x98e <Timer_Init+0x8c>
          case TIMER_MODE:
              {
                switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 942:	8a 81       	ldd	r24, Y+2	; 0x02
 944:	88 23       	and	r24, r24
 946:	19 f0       	breq	.+6      	; 0x94e <Timer_Init+0x4c>
 948:	81 30       	cpi	r24, 0x01	; 1
 94a:	59 f4       	brne	.+22     	; 0x962 <Timer_Init+0x60>
 94c:	04 c0       	rjmp	.+8      	; 0x956 <Timer_Init+0x54>
				{
                    case TIMER_POLLING_MODE:
                        {/*Disable interrupts for T0 without effecting any other timer*/
                         /*without Disabling Global interrupt*/
                        TIMSK &=T0_INTERRUPT_DISABLE;
 94e:	89 b7       	in	r24, 0x39	; 57
 950:	8c 7f       	andi	r24, 0xFC	; 252
 952:	89 bf       	out	0x39, r24	; 57
                            break;
 954:	32 c0       	rjmp	.+100    	; 0x9ba <Timer_Init+0xb8>
                         }
                                  case TIMER_INTERRUPT_MODE:
                                  { /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
                                    */
                                    G_interrupt_Enable();
 956:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                                    TIMSK |= T0_INTERRUPT_NORMAL;
 95a:	89 b7       	in	r24, 0x39	; 57
 95c:	81 60       	ori	r24, 0x01	; 1
 95e:	89 bf       	out	0x39, r24	; 57
                                    break;
 960:	2c c0       	rjmp	.+88     	; 0x9ba <Timer_Init+0xb8>
                                  }
                                  default :
                                  Ret+=E_NOK;
 962:	1f 5f       	subi	r17, 0xFF	; 255
								  break;
 964:	2a c0       	rjmp	.+84     	; 0x9ba <Timer_Init+0xb8>
/*                             TIMER 0 As a COUNTER_RISING_MODE          */
/*************************************************************************/

                          case COUNTER_RISING_MODE:
                            {
                                  TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
 966:	83 b7       	in	r24, 0x33	; 51
 968:	8d 60       	ori	r24, 0x0D	; 13
 96a:	83 bf       	out	0x33, r24	; 51
                                    switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 96c:	8a 81       	ldd	r24, Y+2	; 0x02
 96e:	88 23       	and	r24, r24
 970:	19 f0       	breq	.+6      	; 0x978 <Timer_Init+0x76>
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	59 f4       	brne	.+22     	; 0x98c <Timer_Init+0x8a>
 976:	04 c0       	rjmp	.+8      	; 0x980 <Timer_Init+0x7e>
                                        case TIMER_POLLING_MODE:
                                          {
            /*Disable interrupts for T0 without effecting any other timer*/
              /*without Disabling Global interrupt*/
                                            TIMSK &=T0_INTERRUPT_DISABLE;
 978:	89 b7       	in	r24, 0x39	; 57
 97a:	8c 7f       	andi	r24, 0xFC	; 252
 97c:	89 bf       	out	0x39, r24	; 57
                                            break;
 97e:	07 c0       	rjmp	.+14     	; 0x98e <Timer_Init+0x8c>

                                          case TIMER_INTERRUPT_MODE:
                                           /*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
                                              */
                                              G_interrupt_Enable();
 980:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                                              TIMSK |= T0_INTERRUPT_NORMAL;
 984:	89 b7       	in	r24, 0x39	; 57
 986:	81 60       	ori	r24, 0x01	; 1
 988:	89 bf       	out	0x39, r24	; 57
                                              break;
 98a:	01 c0       	rjmp	.+2      	; 0x98e <Timer_Init+0x8c>

                                          default :
                                          Ret+=E_NOK;
 98c:	1f 5f       	subi	r17, 0xFF	; 255
/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
/*************************************************************************/

                                    case COUNTER_FALLING_MODE:
                                    {
                                        TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
 98e:	83 b7       	in	r24, 0x33	; 51
 990:	8c 60       	ori	r24, 0x0C	; 12
 992:	83 bf       	out	0x33, r24	; 51
                                          switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 994:	8a 81       	ldd	r24, Y+2	; 0x02
 996:	88 23       	and	r24, r24
 998:	19 f0       	breq	.+6      	; 0x9a0 <Timer_Init+0x9e>
 99a:	81 30       	cpi	r24, 0x01	; 1
 99c:	59 f4       	brne	.+22     	; 0x9b4 <Timer_Init+0xb2>
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <Timer_Init+0xa6>
                                              case TIMER_POLLING_MODE:
                                                {

            /*Disable interrupts for T0 without effecting any other timer*/
                /*without Disabling Global interrupt*/
                                                  TIMSK &=T0_INTERRUPT_DISABLE;
 9a0:	89 b7       	in	r24, 0x39	; 57
 9a2:	8c 7f       	andi	r24, 0xFC	; 252
 9a4:	89 bf       	out	0x39, r24	; 57

                                                  break;
 9a6:	09 c0       	rjmp	.+18     	; 0x9ba <Timer_Init+0xb8>
                                                case TIMER_INTERRUPT_MODE:
                                                  {
                                                    /*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
                                                    */
                                                    G_interrupt_Enable();
 9a8:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;
 9ac:	89 b7       	in	r24, 0x39	; 57
 9ae:	81 60       	ori	r24, 0x01	; 1
 9b0:	89 bf       	out	0x39, r24	; 57

                                                    break;
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <Timer_Init+0xb8>
                                                  }
                                                  default:
                                                  Ret+=E_NOK;
 9b4:	1f 5f       	subi	r17, 0xFF	; 255
												  break;
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <Timer_Init+0xb8>
                                                }
                                      break;
                                      }
                                      default:
                                      Ret+=E_NOK;
 9b8:	1f 5f       	subi	r17, 0xFF	; 255
/*************************************************************************/

    case TIMER_CH1:
        {

    switch (Timer_cfg->Timer_Mode)
 9ba:	89 81       	ldd	r24, Y+1	; 0x01
 9bc:	81 30       	cpi	r24, 0x01	; 1
 9be:	d1 f0       	breq	.+52     	; 0x9f4 <Timer_Init+0xf2>
 9c0:	81 30       	cpi	r24, 0x01	; 1
 9c2:	20 f0       	brcs	.+8      	; 0x9cc <Timer_Init+0xca>
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	09 f0       	breq	.+2      	; 0x9ca <Timer_Init+0xc8>
 9c8:	43 c0       	rjmp	.+134    	; 0xa50 <Timer_Init+0x14e>
 9ca:	2b c0       	rjmp	.+86     	; 0xa22 <Timer_Init+0x120>
    {
      case TIMER_MODE:
      {
        TCCR1 = T1_NORMAL_MODE_CONFIG;
 9cc:	1f bc       	out	0x2f, r1	; 47
 9ce:	1e bc       	out	0x2e, r1	; 46
              switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	88 23       	and	r24, r24
 9d4:	19 f0       	breq	.+6      	; 0x9dc <Timer_Init+0xda>
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	59 f4       	brne	.+22     	; 0x9f0 <Timer_Init+0xee>
 9da:	04 c0       	rjmp	.+8      	; 0x9e4 <Timer_Init+0xe2>
              case TIMER_POLLING_MODE:
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;
 9dc:	89 b7       	in	r24, 0x39	; 57
 9de:	83 7c       	andi	r24, 0xC3	; 195
 9e0:	89 bf       	out	0x39, r24	; 57

                break;
 9e2:	7c c0       	rjmp	.+248    	; 0xadc <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 9e4:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 9e8:	89 b7       	in	r24, 0x39	; 57
 9ea:	84 60       	ori	r24, 0x04	; 4
 9ec:	89 bf       	out	0x39, r24	; 57
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 9ee:	76 c0       	rjmp	.+236    	; 0xadc <Timer_Init+0x1da>
              }
              default :
              Ret+=E_NOK;
 9f0:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
 9f2:	74 c0       	rjmp	.+232    	; 0xadc <Timer_Init+0x1da>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
            TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
 9f4:	8e b5       	in	r24, 0x2e	; 46
 9f6:	9f b5       	in	r25, 0x2f	; 47
 9f8:	87 60       	ori	r24, 0x07	; 7
 9fa:	9f bd       	out	0x2f, r25	; 47
 9fc:	8e bd       	out	0x2e, r24	; 46

            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 9fe:	8a 81       	ldd	r24, Y+2	; 0x02
 a00:	88 23       	and	r24, r24
 a02:	19 f0       	breq	.+6      	; 0xa0a <Timer_Init+0x108>
 a04:	81 30       	cpi	r24, 0x01	; 1
 a06:	59 f4       	brne	.+22     	; 0xa1e <Timer_Init+0x11c>
 a08:	04 c0       	rjmp	.+8      	; 0xa12 <Timer_Init+0x110>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 a0a:	89 b7       	in	r24, 0x39	; 57
 a0c:	83 7c       	andi	r24, 0xC3	; 195
 a0e:	89 bf       	out	0x39, r24	; 57

                break;
 a10:	65 c0       	rjmp	.+202    	; 0xadc <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 a12:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 a16:	89 b7       	in	r24, 0x39	; 57
 a18:	84 60       	ori	r24, 0x04	; 4
 a1a:	89 bf       	out	0x39, r24	; 57
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 a1c:	5f c0       	rjmp	.+190    	; 0xadc <Timer_Init+0x1da>
              }
              default:
              Ret+=E_NOK;
 a1e:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
 a20:	5d c0       	rjmp	.+186    	; 0xadc <Timer_Init+0x1da>
            }
        break;
      }
      case COUNTER_FALLING_MODE:
      {
            TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
 a22:	8e b5       	in	r24, 0x2e	; 46
 a24:	9f b5       	in	r25, 0x2f	; 47
 a26:	86 60       	ori	r24, 0x06	; 6
 a28:	9f bd       	out	0x2f, r25	; 47
 a2a:	8e bd       	out	0x2e, r24	; 46
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 a2c:	8a 81       	ldd	r24, Y+2	; 0x02
 a2e:	88 23       	and	r24, r24
 a30:	19 f0       	breq	.+6      	; 0xa38 <Timer_Init+0x136>
 a32:	81 30       	cpi	r24, 0x01	; 1
 a34:	59 f4       	brne	.+22     	; 0xa4c <Timer_Init+0x14a>
 a36:	04 c0       	rjmp	.+8      	; 0xa40 <Timer_Init+0x13e>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 a38:	89 b7       	in	r24, 0x39	; 57
 a3a:	83 7c       	andi	r24, 0xC3	; 195
 a3c:	89 bf       	out	0x39, r24	; 57
                break;
 a3e:	4e c0       	rjmp	.+156    	; 0xadc <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 a40:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 a44:	89 b7       	in	r24, 0x39	; 57
 a46:	84 60       	ori	r24, 0x04	; 4
 a48:	89 bf       	out	0x39, r24	; 57
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */

                break;
 a4a:	48 c0       	rjmp	.+144    	; 0xadc <Timer_Init+0x1da>
              }
              default :
              Ret+=E_NOK;
 a4c:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
 a4e:	46 c0       	rjmp	.+140    	; 0xadc <Timer_Init+0x1da>
            }
      break;
      }
      default :
      Ret+=E_NOK;
 a50:	1f 5f       	subi	r17, 0xFF	; 255
    break;
 a52:	44 c0       	rjmp	.+136    	; 0xadc <Timer_Init+0x1da>
  /*                             TIMER 2                                   */
  /*************************************************************************/

  case TIMER_CH2:
  {
TCCR2 |=T2_NORMAL_MODE_CONFIG;
 a54:	85 b5       	in	r24, 0x25	; 37
 a56:	85 bd       	out	0x25, r24	; 37
    switch (Timer_cfg->Timer_Mode) {
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	88 23       	and	r24, r24
 a5c:	19 f0       	breq	.+6      	; 0xa64 <Timer_Init+0x162>
 a5e:	81 30       	cpi	r24, 0x01	; 1
 a60:	e1 f5       	brne	.+120    	; 0xada <Timer_Init+0x1d8>
 a62:	12 c0       	rjmp	.+36     	; 0xa88 <Timer_Init+0x186>
      case TIMER_MODE:
      {
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 a64:	8a 81       	ldd	r24, Y+2	; 0x02
 a66:	88 23       	and	r24, r24
 a68:	19 f0       	breq	.+6      	; 0xa70 <Timer_Init+0x16e>
 a6a:	81 30       	cpi	r24, 0x01	; 1
 a6c:	59 f4       	brne	.+22     	; 0xa84 <Timer_Init+0x182>
 a6e:	04 c0       	rjmp	.+8      	; 0xa78 <Timer_Init+0x176>
              case TIMER_POLLING_MODE:
              {
                  TIMSK &= T2_INTERRUPT_DISABLE;
 a70:	89 b7       	in	r24, 0x39	; 57
 a72:	8f 73       	andi	r24, 0x3F	; 63
 a74:	89 bf       	out	0x39, r24	; 57
                break;
 a76:	32 c0       	rjmp	.+100    	; 0xadc <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 a78:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 a7c:	89 b7       	in	r24, 0x39	; 57
 a7e:	80 6c       	ori	r24, 0xC0	; 192
 a80:	89 bf       	out	0x39, r24	; 57

                break;
 a82:	2c c0       	rjmp	.+88     	; 0xadc <Timer_Init+0x1da>
              }
              default :
              Ret+=E_NOK;
 a84:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
 a86:	2a c0       	rjmp	.+84     	; 0xadc <Timer_Init+0x1da>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
          ASSR |=0x08;
 a88:	82 b5       	in	r24, 0x22	; 34
 a8a:	88 60       	ori	r24, 0x08	; 8
 a8c:	82 bd       	out	0x22, r24	; 34
            switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 a8e:	8a 81       	ldd	r24, Y+2	; 0x02
 a90:	81 30       	cpi	r24, 0x01	; 1
 a92:	49 f0       	breq	.+18     	; 0xaa6 <Timer_Init+0x1a4>
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	18 f0       	brcs	.+6      	; 0xa9e <Timer_Init+0x19c>
 a98:	82 30       	cpi	r24, 0x02	; 2
 a9a:	f9 f4       	brne	.+62     	; 0xada <Timer_Init+0x1d8>
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <Timer_Init+0x1b0>
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;
 a9e:	89 b7       	in	r24, 0x39	; 57
 aa0:	8f 73       	andi	r24, 0x3F	; 63
 aa2:	89 bf       	out	0x39, r24	; 57

                break;
 aa4:	1a c0       	rjmp	.+52     	; 0xada <Timer_Init+0x1d8>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 aa6:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 aaa:	89 b7       	in	r24, 0x39	; 57
 aac:	80 6c       	ori	r24, 0xC0	; 192
 aae:	89 bf       	out	0x39, r24	; 57
                break;
 ab0:	14 c0       	rjmp	.+40     	; 0xada <Timer_Init+0x1d8>
              }
              case COUNTER_FALLING_MODE:
              {
                  ASSR |=0x08;
 ab2:	82 b5       	in	r24, 0x22	; 34
 ab4:	88 60       	ori	r24, 0x08	; 8
 ab6:	82 bd       	out	0x22, r24	; 34
                    switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 ab8:	8a 81       	ldd	r24, Y+2	; 0x02
 aba:	88 23       	and	r24, r24
 abc:	19 f0       	breq	.+6      	; 0xac4 <Timer_Init+0x1c2>
 abe:	81 30       	cpi	r24, 0x01	; 1
 ac0:	59 f4       	brne	.+22     	; 0xad8 <Timer_Init+0x1d6>
 ac2:	04 c0       	rjmp	.+8      	; 0xacc <Timer_Init+0x1ca>
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;
 ac4:	89 b7       	in	r24, 0x39	; 57
 ac6:	8f 73       	andi	r24, 0x3F	; 63
 ac8:	89 bf       	out	0x39, r24	; 57

                        break;
 aca:	07 c0       	rjmp	.+14     	; 0xada <Timer_Init+0x1d8>
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
 acc:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
                          TIMSK|=T2_INTERRUPT_NORMAL;
 ad0:	89 b7       	in	r24, 0x39	; 57
 ad2:	80 6c       	ori	r24, 0xC0	; 192
 ad4:	89 bf       	out	0x39, r24	; 57
                        break;
 ad6:	01 c0       	rjmp	.+2      	; 0xada <Timer_Init+0x1d8>
                      }

              default :
              Ret+=E_NOK;
 ad8:	1f 5f       	subi	r17, 0xFF	; 255
            }
        break;
            }
            }
  default:
  Ret+=E_NOK;
 ada:	1f 5f       	subi	r17, 0xFF	; 255
}
 }

}
return Ret;
}
 adc:	81 2f       	mov	r24, r17
 ade:	df 91       	pop	r29
 ae0:	cf 91       	pop	r28
 ae2:	1f 91       	pop	r17
 ae4:	08 95       	ret

00000ae6 <Timer_Start>:
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
uint8_t Ret;
switch (Timer_CH_NO) {
 ae6:	81 30       	cpi	r24, 0x01	; 1
 ae8:	09 f4       	brne	.+2      	; 0xaec <Timer_Start+0x6>
 aea:	4f c0       	rjmp	.+158    	; 0xb8a <Timer_Start+0xa4>
 aec:	81 30       	cpi	r24, 0x01	; 1
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <Timer_Start+0x12>
 af0:	82 30       	cpi	r24, 0x02	; 2
 af2:	09 f0       	breq	.+2      	; 0xaf6 <Timer_Start+0x10>
 af4:	f3 c0       	rjmp	.+486    	; 0xcdc <Timer_Start+0x1f6>
 af6:	97 c0       	rjmp	.+302    	; 0xc26 <Timer_Start+0x140>
case TIMER_CH0:{/***********************************************************************************************************************/
switch(prescaler_value){
 af8:	80 91 82 00 	lds	r24, 0x0082
 afc:	84 30       	cpi	r24, 0x04	; 4
 afe:	21 f1       	breq	.+72     	; 0xb48 <Timer_Start+0x62>
 b00:	85 30       	cpi	r24, 0x05	; 5
 b02:	30 f4       	brcc	.+12     	; 0xb10 <Timer_Start+0x2a>
 b04:	81 30       	cpi	r24, 0x01	; 1
 b06:	51 f0       	breq	.+20     	; 0xb1c <Timer_Start+0x36>
 b08:	82 30       	cpi	r24, 0x02	; 2
 b0a:	09 f0       	breq	.+2      	; 0xb0e <Timer_Start+0x28>
 b0c:	e9 c0       	rjmp	.+466    	; 0xce0 <Timer_Start+0x1fa>
 b0e:	11 c0       	rjmp	.+34     	; 0xb32 <Timer_Start+0x4c>
 b10:	86 30       	cpi	r24, 0x06	; 6
 b12:	29 f1       	breq	.+74     	; 0xb5e <Timer_Start+0x78>
 b14:	87 30       	cpi	r24, 0x07	; 7
 b16:	09 f0       	breq	.+2      	; 0xb1a <Timer_Start+0x34>
 b18:	e3 c0       	rjmp	.+454    	; 0xce0 <Timer_Start+0x1fa>
 b1a:	2c c0       	rjmp	.+88     	; 0xb74 <Timer_Start+0x8e>
case TIMER_PRESCALER_NO :{
if(Timer_Count < MAX0){
 b1c:	6f 3f       	cpi	r22, 0xFF	; 255
 b1e:	71 05       	cpc	r23, r1
 b20:	08 f0       	brcs	.+2      	; 0xb24 <Timer_Start+0x3e>
 b22:	e0 c0       	rjmp	.+448    	; 0xce4 <Timer_Start+0x1fe>
TCCR0 |=TIMER_PRESCALER_NO;
 b24:	83 b7       	in	r24, 0x33	; 51
 b26:	81 60       	ori	r24, 0x01	; 1
 b28:	83 bf       	out	0x33, r24	; 51
TCNT0 =	MAX0 - Timer_Count;
 b2a:	60 95       	com	r22
 b2c:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b2e:	80 e0       	ldi	r24, 0x00	; 0
 b30:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_8 :{
if(Timer_Count < MAX0){
 b32:	6f 3f       	cpi	r22, 0xFF	; 255
 b34:	71 05       	cpc	r23, r1
 b36:	08 f0       	brcs	.+2      	; 0xb3a <Timer_Start+0x54>
 b38:	d7 c0       	rjmp	.+430    	; 0xce8 <Timer_Start+0x202>
TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
 b3a:	83 b7       	in	r24, 0x33	; 51
 b3c:	82 60       	ori	r24, 0x02	; 2
 b3e:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b40:	60 95       	com	r22
 b42:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b44:	80 e0       	ldi	r24, 0x00	; 0
 b46:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_64 :{
if(Timer_Count < MAX0){
 b48:	6f 3f       	cpi	r22, 0xFF	; 255
 b4a:	71 05       	cpc	r23, r1
 b4c:	08 f0       	brcs	.+2      	; 0xb50 <Timer_Start+0x6a>
 b4e:	ce c0       	rjmp	.+412    	; 0xcec <Timer_Start+0x206>
TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
 b50:	83 b7       	in	r24, 0x33	; 51
 b52:	83 60       	ori	r24, 0x03	; 3
 b54:	83 bf       	out	0x33, r24	; 51
TCNT0 = MAX0 - Timer_Count;
 b56:	60 95       	com	r22
 b58:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b5a:	80 e0       	ldi	r24, 0x00	; 0
 b5c:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_256 :{
if(Timer_Count < MAX0){
 b5e:	6f 3f       	cpi	r22, 0xFF	; 255
 b60:	71 05       	cpc	r23, r1
 b62:	08 f0       	brcs	.+2      	; 0xb66 <Timer_Start+0x80>
 b64:	c5 c0       	rjmp	.+394    	; 0xcf0 <Timer_Start+0x20a>
TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
 b66:	83 b7       	in	r24, 0x33	; 51
 b68:	84 60       	ori	r24, 0x04	; 4
 b6a:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b6c:	60 95       	com	r22
 b6e:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b70:	80 e0       	ldi	r24, 0x00	; 0
 b72:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_1024 :{
if(Timer_Count < MAX0){
 b74:	6f 3f       	cpi	r22, 0xFF	; 255
 b76:	71 05       	cpc	r23, r1
 b78:	08 f0       	brcs	.+2      	; 0xb7c <Timer_Start+0x96>
 b7a:	bc c0       	rjmp	.+376    	; 0xcf4 <Timer_Start+0x20e>
TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
 b7c:	83 b7       	in	r24, 0x33	; 51
 b7e:	85 60       	ori	r24, 0x05	; 5
 b80:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b82:	60 95       	com	r22
 b84:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	08 95       	ret
break;
}
case TIMER_CH1:{

  switch(prescaler_value){
 b8a:	80 91 82 00 	lds	r24, 0x0082
 b8e:	84 30       	cpi	r24, 0x04	; 4
 b90:	31 f1       	breq	.+76     	; 0xbde <Timer_Start+0xf8>
 b92:	85 30       	cpi	r24, 0x05	; 5
 b94:	30 f4       	brcc	.+12     	; 0xba2 <Timer_Start+0xbc>
 b96:	81 30       	cpi	r24, 0x01	; 1
 b98:	51 f0       	breq	.+20     	; 0xbae <Timer_Start+0xc8>
 b9a:	82 30       	cpi	r24, 0x02	; 2
 b9c:	09 f0       	breq	.+2      	; 0xba0 <Timer_Start+0xba>
 b9e:	ac c0       	rjmp	.+344    	; 0xcf8 <Timer_Start+0x212>
 ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <Timer_Start+0xe0>
 ba2:	86 30       	cpi	r24, 0x06	; 6
 ba4:	41 f1       	breq	.+80     	; 0xbf6 <Timer_Start+0x110>
 ba6:	87 30       	cpi	r24, 0x07	; 7
 ba8:	09 f0       	breq	.+2      	; 0xbac <Timer_Start+0xc6>
 baa:	a6 c0       	rjmp	.+332    	; 0xcf8 <Timer_Start+0x212>
 bac:	30 c0       	rjmp	.+96     	; 0xc0e <Timer_Start+0x128>
  case TIMER_PRESCALER_NO :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER_PRESCALER_NO;
 bae:	8e b5       	in	r24, 0x2e	; 46
 bb0:	9f b5       	in	r25, 0x2f	; 47
 bb2:	81 60       	ori	r24, 0x01	; 1
 bb4:	9f bd       	out	0x2f, r25	; 47
 bb6:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 bb8:	70 95       	com	r23
 bba:	61 95       	neg	r22
 bbc:	7f 4f       	sbci	r23, 0xFF	; 255
 bbe:	7d bd       	out	0x2d, r23	; 45
 bc0:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bc2:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret=E_NOK;
  }
  break;
 bc4:	08 95       	ret
  }
  case TIMER_PRESCALER_8 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
 bc6:	8e b5       	in	r24, 0x2e	; 46
 bc8:	9f b5       	in	r25, 0x2f	; 47
 bca:	82 60       	ori	r24, 0x02	; 2
 bcc:	9f bd       	out	0x2f, r25	; 47
 bce:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 bd0:	70 95       	com	r23
 bd2:	61 95       	neg	r22
 bd4:	7f 4f       	sbci	r23, 0xFF	; 255
 bd6:	7d bd       	out	0x2d, r23	; 45
 bd8:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bda:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 bdc:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
 bde:	8e b5       	in	r24, 0x2e	; 46
 be0:	9f b5       	in	r25, 0x2f	; 47
 be2:	83 60       	ori	r24, 0x03	; 3
 be4:	9f bd       	out	0x2f, r25	; 47
 be6:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 be8:	70 95       	com	r23
 bea:	61 95       	neg	r22
 bec:	7f 4f       	sbci	r23, 0xFF	; 255
 bee:	7d bd       	out	0x2d, r23	; 45
 bf0:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bf2:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 bf4:	08 95       	ret
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
 bf6:	8e b5       	in	r24, 0x2e	; 46
 bf8:	9f b5       	in	r25, 0x2f	; 47
 bfa:	84 60       	ori	r24, 0x04	; 4
 bfc:	9f bd       	out	0x2f, r25	; 47
 bfe:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 c00:	70 95       	com	r23
 c02:	61 95       	neg	r22
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	7d bd       	out	0x2d, r23	; 45
 c08:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 c0a:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 c0c:	08 95       	ret
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
 c0e:	8e b5       	in	r24, 0x2e	; 46
 c10:	9f b5       	in	r25, 0x2f	; 47
 c12:	85 60       	ori	r24, 0x05	; 5
 c14:	9f bd       	out	0x2f, r25	; 47
 c16:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 c18:	70 95       	com	r23
 c1a:	61 95       	neg	r22
 c1c:	7f 4f       	sbci	r23, 0xFF	; 255
 c1e:	7d bd       	out	0x2d, r23	; 45
 c20:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 c22:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 c24:	08 95       	ret
	break;
}
case TIMER_CH2:
	{
  
		switch(prescaler_value){
 c26:	80 91 82 00 	lds	r24, 0x0082
 c2a:	84 30       	cpi	r24, 0x04	; 4
 c2c:	79 f1       	breq	.+94     	; 0xc8c <Timer_Start+0x1a6>
 c2e:	85 30       	cpi	r24, 0x05	; 5
 c30:	40 f4       	brcc	.+16     	; 0xc42 <Timer_Start+0x15c>
 c32:	82 30       	cpi	r24, 0x02	; 2
 c34:	c9 f0       	breq	.+50     	; 0xc68 <Timer_Start+0x182>
 c36:	83 30       	cpi	r24, 0x03	; 3
 c38:	10 f5       	brcc	.+68     	; 0xc7e <Timer_Start+0x198>
 c3a:	81 30       	cpi	r24, 0x01	; 1
 c3c:	09 f0       	breq	.+2      	; 0xc40 <Timer_Start+0x15a>
 c3e:	5e c0       	rjmp	.+188    	; 0xcfc <Timer_Start+0x216>
 c40:	08 c0       	rjmp	.+16     	; 0xc52 <Timer_Start+0x16c>
 c42:	86 30       	cpi	r24, 0x06	; 6
 c44:	b9 f1       	breq	.+110    	; 0xcb4 <Timer_Start+0x1ce>
 c46:	86 30       	cpi	r24, 0x06	; 6
 c48:	58 f1       	brcs	.+86     	; 0xca0 <Timer_Start+0x1ba>
 c4a:	87 30       	cpi	r24, 0x07	; 7
 c4c:	09 f0       	breq	.+2      	; 0xc50 <Timer_Start+0x16a>
 c4e:	56 c0       	rjmp	.+172    	; 0xcfc <Timer_Start+0x216>
 c50:	3b c0       	rjmp	.+118    	; 0xcc8 <Timer_Start+0x1e2>
   
		  case TIMER_PRESCALER_NO :
			{
    
				if(Timer_Count < MAX0){
 c52:	6f 3f       	cpi	r22, 0xFF	; 255
 c54:	71 05       	cpc	r23, r1
 c56:	08 f0       	brcs	.+2      	; 0xc5a <Timer_Start+0x174>
 c58:	53 c0       	rjmp	.+166    	; 0xd00 <Timer_Start+0x21a>
     
			      TCCR2 |= TIMER_PRESCALER_NO;
 c5a:	85 b5       	in	r24, 0x25	; 37
 c5c:	81 60       	ori	r24, 0x01	; 1
 c5e:	85 bd       	out	0x25, r24	; 37
		      
				  TCNT2 = MAX2 - Timer_Count;
 c60:	60 95       	com	r22
 c62:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c64:	80 e0       	ldi	r24, 0x00	; 0
 c66:	08 95       	ret
			break;
			}

case TIMER_PRESCALER_8 :
  {
          if(Timer_Count < MAX0)
 c68:	6f 3f       	cpi	r22, 0xFF	; 255
 c6a:	71 05       	cpc	r23, r1
 c6c:	08 f0       	brcs	.+2      	; 0xc70 <Timer_Start+0x18a>
 c6e:	4a c0       	rjmp	.+148    	; 0xd04 <Timer_Start+0x21e>
            {
           TCCR2 |=TIMER_PRESCALER_8;
 c70:	85 b5       	in	r24, 0x25	; 37
 c72:	82 60       	ori	r24, 0x02	; 2
 c74:	85 bd       	out	0x25, r24	; 37
           TCNT2 =MAX2 - Timer_Count;
 c76:	60 95       	com	r22
 c78:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c7a:	80 e0       	ldi	r24, 0x00	; 0
 c7c:	08 95       	ret
  }
  case TIMER_PRESCALER_32:
  {
    if(Timer_Count < MAX1)
         {
         TCCR2 |=TIMER_PRESCALER_32;
 c7e:	85 b5       	in	r24, 0x25	; 37
 c80:	83 60       	ori	r24, 0x03	; 3
 c82:	85 bd       	out	0x25, r24	; 37
         TCNT2 =MAX2 - Timer_Count;
 c84:	60 95       	com	r22
 c86:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c88:	80 e0       	ldi	r24, 0x00	; 0
        else
        {
    Ret=E_NOK;
  }

    break;
 c8a:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :
  {
       if(Timer_Count < MAX2)
 c8c:	6f 3f       	cpi	r22, 0xFF	; 255
 c8e:	71 05       	cpc	r23, r1
 c90:	d8 f5       	brcc	.+118    	; 0xd08 <Timer_Start+0x222>
       {
       TCCR2 |=TIMER_PRESCALER_64;
 c92:	85 b5       	in	r24, 0x25	; 37
 c94:	84 60       	ori	r24, 0x04	; 4
 c96:	85 bd       	out	0x25, r24	; 37
       TCNT2 =MAX2 - Timer_Count;
 c98:	60 95       	com	r22
 c9a:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c9c:	80 e0       	ldi	r24, 0x00	; 0
 c9e:	08 95       	ret
  Ret=E_NOK;
  }
  break;
  }
  case TIMER_PRESCALER_128 :{
  if(Timer_Count < MAX2){
 ca0:	6f 3f       	cpi	r22, 0xFF	; 255
 ca2:	71 05       	cpc	r23, r1
 ca4:	98 f5       	brcc	.+102    	; 0xd0c <Timer_Start+0x226>
  TCCR2 |= TIMER_PRESCALER_128;
 ca6:	85 b5       	in	r24, 0x25	; 37
 ca8:	85 60       	ori	r24, 0x05	; 5
 caa:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 cac:	60 95       	com	r22
 cae:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 cb0:	80 e0       	ldi	r24, 0x00	; 0
 cb2:	08 95       	ret
  Ret= E_NOK;
    }
  break;
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX2){
 cb4:	6f 3f       	cpi	r22, 0xFF	; 255
 cb6:	71 05       	cpc	r23, r1
 cb8:	58 f5       	brcc	.+86     	; 0xd10 <Timer_Start+0x22a>
  TCCR2 |= TIMER_PRESCALER_256;
 cba:	85 b5       	in	r24, 0x25	; 37
 cbc:	86 60       	ori	r24, 0x06	; 6
 cbe:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 cc0:	60 95       	com	r22
 cc2:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	08 95       	ret

  }
  break;
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX2){
 cc8:	6f 3f       	cpi	r22, 0xFF	; 255
 cca:	71 05       	cpc	r23, r1
 ccc:	18 f5       	brcc	.+70     	; 0xd14 <Timer_Start+0x22e>
  TCCR2 |=TIMER_PRESCALER_1024;
 cce:	85 b5       	in	r24, 0x25	; 37
 cd0:	87 60       	ori	r24, 0x07	; 7
 cd2:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 cd4:	60 95       	com	r22
 cd6:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 cd8:	80 e0       	ldi	r24, 0x00	; 0
 cda:	08 95       	ret
break;
}
default:
Ret= E_NOK;
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	08 95       	ret
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 ce0:	80 e0       	ldi	r24, 0x00	; 0
 ce2:	08 95       	ret
 ce4:	80 e0       	ldi	r24, 0x00	; 0
 ce6:	08 95       	ret
 ce8:	80 e0       	ldi	r24, 0x00	; 0
 cea:	08 95       	ret
 cec:	80 e0       	ldi	r24, 0x00	; 0
 cee:	08 95       	ret
 cf0:	80 e0       	ldi	r24, 0x00	; 0
 cf2:	08 95       	ret
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	08 95       	ret
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	08 95       	ret
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	08 95       	ret
 d00:	80 e0       	ldi	r24, 0x00	; 0
 d02:	08 95       	ret
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	08 95       	ret
 d08:	80 e0       	ldi	r24, 0x00	; 0
 d0a:	08 95       	ret
 d0c:	80 e0       	ldi	r24, 0x00	; 0
 d0e:	08 95       	ret
 d10:	80 e0       	ldi	r24, 0x00	; 0
 d12:	08 95       	ret
 d14:	80 e0       	ldi	r24, 0x00	; 0
Ret= E_NOK;
break;
}
return Ret;

}
 d16:	08 95       	ret

00000d18 <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret;
switch (Timer_CH_NO) {
 d18:	81 30       	cpi	r24, 0x01	; 1
 d1a:	51 f0       	breq	.+20     	; 0xd30 <Timer_Stop+0x18>
 d1c:	81 30       	cpi	r24, 0x01	; 1
 d1e:	18 f0       	brcs	.+6      	; 0xd26 <Timer_Stop+0xe>
 d20:	82 30       	cpi	r24, 0x02	; 2
 d22:	91 f4       	brne	.+36     	; 0xd48 <Timer_Stop+0x30>
 d24:	0c c0       	rjmp	.+24     	; 0xd3e <Timer_Stop+0x26>
  case TIMER_CH0:
  {
		TCCR0 &=0xF8;
 d26:	83 b7       	in	r24, 0x33	; 51
 d28:	88 7f       	andi	r24, 0xF8	; 248
 d2a:	83 bf       	out	0x33, r24	; 51
		Ret=E_OK;
 d2c:	80 e0       	ldi	r24, 0x00	; 0
		break;
 d2e:	08 95       	ret
  }
  case TIMER_CH1:
  {
	     TCCR1 &=0xFFF8;
 d30:	8e b5       	in	r24, 0x2e	; 46
 d32:	9f b5       	in	r25, 0x2f	; 47
 d34:	88 7f       	andi	r24, 0xF8	; 248
 d36:	9f bd       	out	0x2f, r25	; 47
 d38:	8e bd       	out	0x2e, r24	; 46
		 Ret=E_OK;
 d3a:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 d3c:	08 95       	ret
  }
  case TIMER_CH2:
    {
		 TCCR2 &= 0xF8;
 d3e:	85 b5       	in	r24, 0x25	; 37
 d40:	88 7f       	andi	r24, 0xF8	; 248
 d42:	85 bd       	out	0x25, r24	; 37
		 Ret=E_OK;
 d44:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 d46:	08 95       	ret
    }
  default :
  Ret=E_NOK;
 d48:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;

}
 d4a:	08 95       	ret

00000d4c <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{
  switch (Timer_CH_NO) {
 d4c:	81 30       	cpi	r24, 0x01	; 1
 d4e:	59 f0       	breq	.+22     	; 0xd66 <Timer_GetStatus+0x1a>
 d50:	81 30       	cpi	r24, 0x01	; 1
 d52:	18 f0       	brcs	.+6      	; 0xd5a <Timer_GetStatus+0xe>
 d54:	82 30       	cpi	r24, 0x02	; 2
 d56:	c9 f4       	brne	.+50     	; 0xd8a <Timer_GetStatus+0x3e>
 d58:	0e c0       	rjmp	.+28     	; 0xd76 <Timer_GetStatus+0x2a>
    case TIMER_CH0:
    {
  *Data =((TIFR>>TOV0)&1);
 d5a:	88 b7       	in	r24, 0x38	; 56
 d5c:	81 70       	andi	r24, 0x01	; 1
 d5e:	fb 01       	movw	r30, r22
 d60:	80 83       	st	Z, r24
    return E_OK;
 d62:	80 e0       	ldi	r24, 0x00	; 0
 d64:	08 95       	ret
    }
    case TIMER_CH1:
    {
    *Data =((TIFR>>TOV1)&1);
 d66:	88 b7       	in	r24, 0x38	; 56
 d68:	86 95       	lsr	r24
 d6a:	86 95       	lsr	r24
 d6c:	81 70       	andi	r24, 0x01	; 1
 d6e:	fb 01       	movw	r30, r22
 d70:	80 83       	st	Z, r24
    return E_OK;
 d72:	80 e0       	ldi	r24, 0x00	; 0
 d74:	08 95       	ret
    }
     case TIMER_CH2:
      {
  *Data =((TIFR>>TOV2)&1);
 d76:	88 b7       	in	r24, 0x38	; 56
 d78:	82 95       	swap	r24
 d7a:	86 95       	lsr	r24
 d7c:	86 95       	lsr	r24
 d7e:	83 70       	andi	r24, 0x03	; 3
 d80:	81 70       	andi	r24, 0x01	; 1
 d82:	fb 01       	movw	r30, r22
 d84:	80 83       	st	Z, r24
    return E_OK;
 d86:	80 e0       	ldi	r24, 0x00	; 0
 d88:	08 95       	ret
      }
    default :
    return E_NOK;
 d8a:	81 e0       	ldi	r24, 0x01	; 1
  }
}
 d8c:	08 95       	ret

00000d8e <Timer_GetValue>:
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
 d8e:	fb 01       	movw	r30, r22
	uint8_t Ret=0;
	switch (Timer_CH_NO) {
 d90:	81 30       	cpi	r24, 0x01	; 1
 d92:	51 f0       	breq	.+20     	; 0xda8 <Timer_GetValue+0x1a>
 d94:	81 30       	cpi	r24, 0x01	; 1
 d96:	18 f0       	brcs	.+6      	; 0xd9e <Timer_GetValue+0x10>
 d98:	82 30       	cpi	r24, 0x02	; 2
 d9a:	89 f4       	brne	.+34     	; 0xdbe <Timer_GetValue+0x30>
 d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <Timer_GetValue+0x26>
		case TIMER_CH0:
		{
			*Data =TCNT0;
 d9e:	82 b7       	in	r24, 0x32	; 50
 da0:	80 83       	st	Z, r24
 da2:	11 82       	std	Z+1, r1	; 0x01
			Ret= E_OK;
 da4:	80 e0       	ldi	r24, 0x00	; 0
			break;
 da6:	08 95       	ret
		}
		case TIMER_CH1:
		{
			*Data =TCNT1;
 da8:	8c b5       	in	r24, 0x2c	; 44
 daa:	9d b5       	in	r25, 0x2d	; 45
 dac:	91 83       	std	Z+1, r25	; 0x01
 dae:	80 83       	st	Z, r24
			Ret= E_OK;
 db0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 db2:	08 95       	ret
		}
		case TIMER_CH2:
		{
			*Data =TCNT2;
 db4:	84 b5       	in	r24, 0x24	; 36
 db6:	80 83       	st	Z, r24
 db8:	11 82       	std	Z+1, r1	; 0x01
			Ret = E_OK;
 dba:	80 e0       	ldi	r24, 0x00	; 0
			break;
 dbc:	08 95       	ret
		}
		default :
		Ret= E_NOK;
 dbe:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
return Ret;

}
 dc0:	08 95       	ret

00000dc2 <TMU_Init>:
Buffer_Request Buffer_Array[Buffer_Size];
volatile uint8_t u8Excution_to_be_done=0;
//static uint8_t u8_is_Started=0;
uint8_t Start_status[Buffer_Size];
ERROR_STATUS TMU_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
 dc2:	0f 93       	push	r16
 dc4:	1f 93       	push	r17
 dc6:	cf 93       	push	r28
 dc8:	df 93       	push	r29
 dca:	ec 01       	movw	r28, r24
 dcc:	09 81       	ldd	r16, Y+1	; 0x01
uint8_t ret=E_OK;
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;
 dce:	80 91 85 00 	lds	r24, 0x0085
 dd2:	8f 5f       	subi	r24, 0xFF	; 255
 dd4:	80 93 85 00 	sts	0x0085, r24

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
 dd8:	20 97       	sbiw	r28, 0x00	; 0
 dda:	11 f0       	breq	.+4      	; 0xde0 <TMU_Init+0x1e>
volatile uint8_t u8Excution_to_be_done=0;
//static uint8_t u8_is_Started=0;
uint8_t Start_status[Buffer_Size];
ERROR_STATUS TMU_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
uint8_t ret=E_OK;
 ddc:	10 e0       	ldi	r17, 0x00	; 0
 dde:	01 c0       	rjmp	.+2      	; 0xde2 <TMU_Init+0x20>
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
 de0:	1a e2       	ldi	r17, 0x2A	; 42
switch(u8_channel_ID)
 de2:	00 23       	and	r16, r16
 de4:	19 f0       	breq	.+6      	; 0xdec <TMU_Init+0x2a>
 de6:	02 30       	cpi	r16, 0x02	; 2
 de8:	79 f4       	brne	.+30     	; 0xe08 <TMU_Init+0x46>
 dea:	07 c0       	rjmp	.+14     	; 0xdfa <TMU_Init+0x38>
{
	case TIMER_CH0:
			G_interrupt_Enable();
 dec:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
			Timer_Init(&Timer_Configuration0);
 df0:	84 e7       	ldi	r24, 0x74	; 116
 df2:	90 e0       	ldi	r25, 0x00	; 0
 df4:	0e 94 81 04 	call	0x902	; 0x902 <Timer_Init>
				break;
 df8:	08 c0       	rjmp	.+16     	; 0xe0a <TMU_Init+0x48>
	case TIMER_CH2:
		G_interrupt_Enable();
 dfa:	0e 94 2d 01 	call	0x25a	; 0x25a <G_interrupt_Enable>
		Timer_Init(&Timer_Configuration2);
 dfe:	8a e7       	ldi	r24, 0x7A	; 122
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	0e 94 81 04 	call	0x902	; 0x902 <Timer_Init>
			break;
 e06:	01 c0       	rjmp	.+2      	; 0xe0a <TMU_Init+0x48>
	default:
			ret+=E_NOK;
 e08:	1f 5f       	subi	r17, 0xFF	; 255

/*************************************************************************/
/*Intializ the required timer identified by the user using required prescaler  */
/************************************************************************/

switch(ConfigPtr->u8_resolution)
 e0a:	88 81       	ld	r24, Y
 e0c:	81 30       	cpi	r24, 0x01	; 1
 e0e:	99 f4       	brne	.+38     	; 0xe36 <TMU_Init+0x74>
{
	case TIMER_RESOLUTION_1_MS:
	{
		switch(u8_channel_ID)
 e10:	00 23       	and	r16, r16
 e12:	19 f0       	breq	.+6      	; 0xe1a <TMU_Init+0x58>
 e14:	02 30       	cpi	r16, 0x02	; 2
 e16:	69 f4       	brne	.+26     	; 0xe32 <TMU_Init+0x70>
 e18:	06 c0       	rjmp	.+12     	; 0xe26 <TMU_Init+0x64>
		{
			case TIMER_CH0 :
				Timer_Start(TIMER_CH0,NUM_OF_TICKS_FOR_1_MS);
 e1a:	80 e0       	ldi	r24, 0x00	; 0
 e1c:	6e e0       	ldi	r22, 0x0E	; 14
 e1e:	70 e0       	ldi	r23, 0x00	; 0
 e20:	0e 94 73 05 	call	0xae6	; 0xae6 <Timer_Start>
					break;
 e24:	09 c0       	rjmp	.+18     	; 0xe38 <TMU_Init+0x76>
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,NUM_OF_TICKS_FOR_1_MS);
 e26:	82 e0       	ldi	r24, 0x02	; 2
 e28:	6e e0       	ldi	r22, 0x0E	; 14
 e2a:	70 e0       	ldi	r23, 0x00	; 0
 e2c:	0e 94 73 05 	call	0xae6	; 0xae6 <Timer_Start>
					break;
 e30:	03 c0       	rjmp	.+6      	; 0xe38 <TMU_Init+0x76>
			default:
				ret+=E_NOK;
 e32:	1f 5f       	subi	r17, 0xFF	; 255
					break;
 e34:	01 c0       	rjmp	.+2      	; 0xe38 <TMU_Init+0x76>
	}	
	
	
	
	default:
	ret+=E_NOK;
 e36:	1f 5f       	subi	r17, 0xFF	; 255

/****************************************************************************/
/*      Deal with Errors  to be returned									*/
/***************************************************************************/
return ret;
}
 e38:	81 2f       	mov	r24, r17
 e3a:	df 91       	pop	r29
 e3c:	cf 91       	pop	r28
 e3e:	1f 91       	pop	r17
 e40:	0f 91       	pop	r16
 e42:	08 95       	ret

00000e44 <TMU_DeInit>:
	uint8_t ret=E_OK;
	/************************************************************************************************/
	/*1    	De_intialize the timer																	*/
	/*2		make sure this function is not called unless timer was intialized before by  TMU_INIT	*/
	/************************************************************************************************/
if (u8_Is_Intialized==1)
 e44:	80 91 85 00 	lds	r24, 0x0085
 e48:	81 30       	cpi	r24, 0x01	; 1
 e4a:	41 f4       	brne	.+16     	; 0xe5c <TMU_DeInit+0x18>
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);
 e4c:	8e e6       	ldi	r24, 0x6E	; 110
 e4e:	90 e0       	ldi	r25, 0x00	; 0
 e50:	0e 94 81 04 	call	0x902	; 0x902 <Timer_Init>

	u8_Is_Intialized=0;
 e54:	10 92 85 00 	sts	0x0085, r1



ERROR_STATUS TMU_DeInit( void )
{
	uint8_t ret=E_OK;
 e58:	80 e0       	ldi	r24, 0x00	; 0
 e5a:	08 95       	ret
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);

	u8_Is_Intialized=0;
	
}else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}
 e5c:	82 30       	cpi	r24, 0x02	; 2
 e5e:	10 f0       	brcs	.+4      	; 0xe64 <TMU_DeInit+0x20>
 e60:	86 e0       	ldi	r24, 0x06	; 6
 e62:	08 95       	ret
	else{
	ret=E_NOK;
 e64:	81 e0       	ldi	r24, 0x01	; 1
	}

	
return ret;	
}
 e66:	08 95       	ret

00000e68 <TMU_Start_Timer>:
	/*
	this enables interrupt and start the timer with the required configurations
	and provide the request to request buffer (ptr_to_func,delay) Dispatcher with the call back function needed(consumer)
	and make sure this function must not be excuted unless Init happened and De_init not happened
	*/
	if(u8_Is_Intialized == 1)
 e68:	50 91 85 00 	lds	r21, 0x0085
 e6c:	51 30       	cpi	r21, 0x01	; 1
 e6e:	91 f4       	brne	.+36     	; 0xe94 <TMU_Start_Timer+0x2c>
	{
		
		(Buffer_Array[u8_function_index]).Fuction_consumer=Function_Consumer;
 e70:	e4 2f       	mov	r30, r20
 e72:	f0 e0       	ldi	r31, 0x00	; 0
 e74:	ee 0f       	add	r30, r30
 e76:	ff 1f       	adc	r31, r31
 e78:	ee 0f       	add	r30, r30
 e7a:	ff 1f       	adc	r31, r31
 e7c:	ee 0f       	add	r30, r30
 e7e:	ff 1f       	adc	r31, r31
 e80:	e2 55       	subi	r30, 0x52	; 82
 e82:	ff 4f       	sbci	r31, 0xFF	; 255
 e84:	91 83       	std	Z+1, r25	; 0x01
 e86:	80 83       	st	Z, r24
		(Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
 e88:	65 83       	std	Z+5, r22	; 0x05
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
 e8a:	34 83       	std	Z+4, r19	; 0x04
 e8c:	23 83       	std	Z+3, r18	; 0x03
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
 e8e:	12 82       	std	Z+2, r1	; 0x02
	
return ret;	
}

ERROR_STATUS TMU_Start_Timer(ptr_to_Fun Function_Consumer,uint8_t  u8_Preodicity,uint8_t u8_function_index,uint16_t u16_Time_delay)
{uint8_t ret=E_OK;
 e90:	80 e0       	ldi	r24, 0x00	; 0
 e92:	08 95       	ret
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
		
		
	}
	else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}else{
 e94:	52 30       	cpi	r21, 0x02	; 2
 e96:	10 f0       	brcs	.+4      	; 0xe9c <TMU_Start_Timer+0x34>
 e98:	86 e0       	ldi	r24, 0x06	; 6
 e9a:	08 95       	ret
		ret+=NOT_INIT;
 e9c:	84 e0       	ldi	r24, 0x04	; 4
	}

	return ret;
}
 e9e:	08 95       	ret

00000ea0 <TMU_Main_Function>:

ERROR_STATUS TMU_Main_Function(void)

{
 ea0:	0f 93       	push	r16
 ea2:	1f 93       	push	r17
 ea4:	cf 93       	push	r28
	uint16_t u16_Time_needed=0;
	ptr_to_Fun Excuted;
	/***********************************************************************/
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
 ea6:	10 92 84 00 	sts	0x0084, r1
 eaa:	20 e0       	ldi	r18, 0x00	; 0
{
	Excuted=((Buffer_Array[u8_FUN_index]).Fuction_consumer);
 eac:	0e ea       	ldi	r16, 0xAE	; 174
 eae:	10 e0       	ldi	r17, 0x00	; 0
 eb0:	30 e0       	ldi	r19, 0x00	; 0
 eb2:	f9 01       	movw	r30, r18
 eb4:	ee 0f       	add	r30, r30
 eb6:	ff 1f       	adc	r31, r31
 eb8:	ee 0f       	add	r30, r30
 eba:	ff 1f       	adc	r31, r31
 ebc:	ee 0f       	add	r30, r30
 ebe:	ff 1f       	adc	r31, r31
 ec0:	e0 0f       	add	r30, r16
 ec2:	f1 1f       	adc	r31, r17
 ec4:	40 81       	ld	r20, Z
 ec6:	51 81       	ldd	r21, Z+1	; 0x01
	u16_Time_needed =(Buffer_Array[u8_FUN_index]).u16_time_delay;
	status_flag =(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped;
	preodic_status_flag=(Buffer_Array[u8_FUN_index]).preodic;
 ec8:	c5 81       	ldd	r28, Z+5	; 0x05

/****************************************************************/
/* check if the event is stopped ... do nothing*/
		if(status_flag==1){ret=E_OK;}
 eca:	82 81       	ldd	r24, Z+2	; 0x02
 ecc:	81 30       	cpi	r24, 0x01	; 1
 ece:	d9 f1       	breq	.+118    	; 0xf46 <TMU_Main_Function+0xa6>
		
	else{
	/***************************************************************/
	/*if the timer started .. and condition met excute the consumer*/
	/***************************************************************/
		if (u8Excution_to_be_done==1)
 ed0:	80 91 83 00 	lds	r24, 0x0083
 ed4:	81 30       	cpi	r24, 0x01	; 1
 ed6:	89 f4       	brne	.+34     	; 0xefa <TMU_Main_Function+0x5a>
			{
	/********************************************/
	/*Count up when flag is set**/
	((Buffer_Array[u8_FUN_index]).u16_Counter)++;
 ed8:	c9 01       	movw	r24, r18
 eda:	88 0f       	add	r24, r24
 edc:	99 1f       	adc	r25, r25
 ede:	88 0f       	add	r24, r24
 ee0:	99 1f       	adc	r25, r25
 ee2:	88 0f       	add	r24, r24
 ee4:	99 1f       	adc	r25, r25
 ee6:	f8 01       	movw	r30, r16
 ee8:	e8 0f       	add	r30, r24
 eea:	f9 1f       	adc	r31, r25
 eec:	86 81       	ldd	r24, Z+6	; 0x06
 eee:	97 81       	ldd	r25, Z+7	; 0x07
 ef0:	01 96       	adiw	r24, 0x01	; 1
 ef2:	97 83       	std	Z+7, r25	; 0x07
 ef4:	86 83       	std	Z+6, r24	; 0x06
	/*make the flag down*/
	u8Excution_to_be_done=0;
 ef6:	10 92 83 00 	sts	0x0083, r1
			}

/*	u16Excution_to_be_done=100;  ISR*/
	if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_index]).u16_Counter) )
 efa:	f9 01       	movw	r30, r18
 efc:	ee 0f       	add	r30, r30
 efe:	ff 1f       	adc	r31, r31
 f00:	ee 0f       	add	r30, r30
 f02:	ff 1f       	adc	r31, r31
 f04:	ee 0f       	add	r30, r30
 f06:	ff 1f       	adc	r31, r31
 f08:	e0 0f       	add	r30, r16
 f0a:	f1 1f       	adc	r31, r17
 f0c:	83 81       	ldd	r24, Z+3	; 0x03
 f0e:	94 81       	ldd	r25, Z+4	; 0x04
 f10:	26 81       	ldd	r18, Z+6	; 0x06
 f12:	37 81       	ldd	r19, Z+7	; 0x07
 f14:	82 17       	cp	r24, r18
 f16:	93 07       	cpc	r25, r19
 f18:	79 f4       	brne	.+30     	; 0xf38 <TMU_Main_Function+0x98>
	{
		Excuted();
 f1a:	fa 01       	movw	r30, r20
 f1c:	09 95       	icall
	/******************************************/
	/*Make it zero so that it will work the next time at the required time (to stop it of ovf)*/
		(Buffer_Array[u8_FUN_index]).u16_Counter=0;
 f1e:	e0 91 84 00 	lds	r30, 0x0084
 f22:	f0 e0       	ldi	r31, 0x00	; 0
 f24:	ee 0f       	add	r30, r30
 f26:	ff 1f       	adc	r31, r31
 f28:	ee 0f       	add	r30, r30
 f2a:	ff 1f       	adc	r31, r31
 f2c:	ee 0f       	add	r30, r30
 f2e:	ff 1f       	adc	r31, r31
 f30:	e0 0f       	add	r30, r16
 f32:	f1 1f       	adc	r31, r17
 f34:	17 82       	std	Z+7, r1	; 0x07
 f36:	16 82       	std	Z+6, r1	; 0x06
		
	/*********************************************************/
	/* if not preodic increment the index after excuteing	*/
	/*********************************************************/

	if(preodic_status_flag==0){
 f38:	cc 23       	and	r28, r28
 f3a:	29 f4       	brne	.+10     	; 0xf46 <TMU_Main_Function+0xa6>
		/*to make it see the next event in the next time
		Also Status_flag =1 so that this function will be stopped
		*/
		status_flag=1;	
		u8_FUN_index++;
 f3c:	80 91 84 00 	lds	r24, 0x0084
 f40:	8f 5f       	subi	r24, 0xFF	; 255
 f42:	80 93 84 00 	sts	0x0084, r24
	uint16_t u16_Time_needed=0;
	ptr_to_Fun Excuted;
	/***********************************************************************/
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
 f46:	20 91 84 00 	lds	r18, 0x0084
 f4a:	2f 5f       	subi	r18, 0xFF	; 255
 f4c:	20 93 84 00 	sts	0x0084, r18
 f50:	22 30       	cpi	r18, 0x02	; 2
 f52:	08 f4       	brcc	.+2      	; 0xf56 <TMU_Main_Function+0xb6>
 f54:	ad cf       	rjmp	.-166    	; 0xeb0 <TMU_Main_Function+0x10>
		}		
	}
	
return ret;

}
 f56:	80 e0       	ldi	r24, 0x00	; 0
 f58:	cf 91       	pop	r28
 f5a:	1f 91       	pop	r17
 f5c:	0f 91       	pop	r16
 f5e:	08 95       	ret

00000f60 <TMU_Stop_Timer>:
{

	/***************************************************/
	/*     Set the stop flag							*/
	/***************************************************/
	(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
 f60:	e8 2f       	mov	r30, r24
 f62:	f0 e0       	ldi	r31, 0x00	; 0
 f64:	ee 0f       	add	r30, r30
 f66:	ff 1f       	adc	r31, r31
 f68:	ee 0f       	add	r30, r30
 f6a:	ff 1f       	adc	r31, r31
 f6c:	ee 0f       	add	r30, r30
 f6e:	ff 1f       	adc	r31, r31
 f70:	e2 55       	subi	r30, 0x52	; 82
 f72:	ff 4f       	sbci	r31, 0xFF	; 255
 f74:	81 e0       	ldi	r24, 0x01	; 1
 f76:	82 83       	std	Z+2, r24	; 0x02
}
 f78:	08 95       	ret

00000f7a <Tmu_Fun>:

void Tmu_Fun(void){DIO_Toggle(GPIOC,BIT4);}
 f7a:	82 e0       	ldi	r24, 0x02	; 2
 f7c:	60 e1       	ldi	r22, 0x10	; 16
 f7e:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_Toggle>
 f82:	08 95       	ret

00000f84 <Tmu_For>:
void Tmu_For(void){DIO_Toggle(GPIOA,BIT4);}
 f84:	80 e0       	ldi	r24, 0x00	; 0
 f86:	60 e1       	ldi	r22, 0x10	; 16
 f88:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_Toggle>
 f8c:	08 95       	ret

00000f8e <Tmu_excute>:
void Tmu_excute(void){DIO_Toggle(GPIOB,BIT4);}
 f8e:	81 e0       	ldi	r24, 0x01	; 1
 f90:	60 e1       	ldi	r22, 0x10	; 16
 f92:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_Toggle>
 f96:	08 95       	ret

00000f98 <timer_interrupt>:


void timer_interrupt(void){
	u8Excution_to_be_done=1;
 f98:	81 e0       	ldi	r24, 0x01	; 1
 f9a:	80 93 83 00 	sts	0x0083, r24
	/*As Timer Start will is ovf based implemented we need t restarted it at interrupt*/
	Timer_Start(TIMER_CH0,NUM_OF_TICKS_FOR_1_MS);
 f9e:	80 e0       	ldi	r24, 0x00	; 0
 fa0:	6e e0       	ldi	r22, 0x0E	; 14
 fa2:	70 e0       	ldi	r23, 0x00	; 0
 fa4:	0e 94 73 05 	call	0xae6	; 0xae6 <Timer_Start>
 fa8:	08 95       	ret

00000faa <_exit>:
 faa:	f8 94       	cli

00000fac <__stop_program>:
 fac:	ff cf       	rjmp	.-2      	; 0xfac <__stop_program>
